
nti_day1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000660  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000660  000006d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000e28  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000992  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000333  00000000  00000000  0000189a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b1  00000000  00000000  00001bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00002080  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000535  00000000  00000000  0000250c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fe 02 	call	0x5fc	; 0x5fc <main>
  8a:	0c 94 2e 03 	jmp	0x65c	; 0x65c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_init>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void button_init(void)
{
	dio_vidConfigChannel(DIO_PORTD,7,INPUT);
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	67 e0       	ldi	r22, 0x07	; 7
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	0e 94 ac 00 	call	0x158	; 0x158 <dio_vidConfigChannel>
	if(button1_conn== button_pullup)
		{dio_vidEnablePullUp(DIO_PORTD,7);}
  9c:	83 e0       	ldi	r24, 0x03	; 3
  9e:	67 e0       	ldi	r22, 0x07	; 7
  a0:	0e 94 1b 02 	call	0x436	; 0x436 <dio_vidEnablePullUp>
		
	dio_vidConfigChannel(DIO_PORTD,6,INPUT);
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	66 e0       	ldi	r22, 0x06	; 6
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	0e 94 ac 00 	call	0x158	; 0x158 <dio_vidConfigChannel>
	if(button2_conn== button_pullup)
		{dio_vidEnablePullUp(DIO_PORTD,6);}
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	66 e0       	ldi	r22, 0x06	; 6
  b2:	0e 94 1b 02 	call	0x436	; 0x436 <dio_vidEnablePullUp>
		
	dio_vidConfigChannel(DIO_PORTD,5,INPUT);
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	65 e0       	ldi	r22, 0x05	; 5
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	0e 94 ac 00 	call	0x158	; 0x158 <dio_vidConfigChannel>
	if(button3_conn== button_pullup)
		{dio_vidEnablePullUp(DIO_PORTD,5);}
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	65 e0       	ldi	r22, 0x05	; 5
  c4:	0e 94 1b 02 	call	0x436	; 0x436 <dio_vidEnablePullUp>
		
	dio_vidConfigChannel(DIO_PORTD,3,INPUT);
  c8:	83 e0       	ldi	r24, 0x03	; 3
  ca:	63 e0       	ldi	r22, 0x03	; 3
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	0e 94 ac 00 	call	0x158	; 0x158 <dio_vidConfigChannel>
	if(button4_conn== button_pullup)
		{dio_vidEnablePullUp(DIO_PORTD,3);}
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	63 e0       	ldi	r22, 0x03	; 3
  d6:	0e 94 1b 02 	call	0x436	; 0x436 <dio_vidEnablePullUp>
}
  da:	08 95       	ret

000000dc <button_get_states>:

button_state button_get_states(button_ID button_id)
{  volatile button_state read =0;
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	00 d0       	rcall	.+0      	; 0xe2 <button_get_states+0x6>
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	19 82       	std	Y+1, r1	; 0x01
	volatile button_state button_read =0 ;
  e8:	1a 82       	std	Y+2, r1	; 0x02
	
	switch(button_id)
  ea:	82 30       	cpi	r24, 0x02	; 2
  ec:	99 f0       	breq	.+38     	; 0x114 <button_get_states+0x38>
  ee:	83 30       	cpi	r24, 0x03	; 3
  f0:	18 f4       	brcc	.+6      	; 0xf8 <button_get_states+0x1c>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	51 f5       	brne	.+84     	; 0x14a <button_get_states+0x6e>
  f6:	05 c0       	rjmp	.+10     	; 0x102 <button_get_states+0x26>
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	a9 f0       	breq	.+42     	; 0x126 <button_get_states+0x4a>
  fc:	84 30       	cpi	r24, 0x04	; 4
  fe:	29 f5       	brne	.+74     	; 0x14a <button_get_states+0x6e>
 100:	1b c0       	rjmp	.+54     	; 0x138 <button_get_states+0x5c>
	{
		case button1 :
			if(button1_conn==button_pulldown)
			{return dio_dioLevelReadChannel(DIO_PORTD,7);}
			else 
			return !(dio_dioLevelReadChannel(DIO_PORTD,7));
 102:	83 e0       	ldi	r24, 0x03	; 3
 104:	67 e0       	ldi	r22, 0x07	; 7
 106:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <dio_dioLevelReadChannel>
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	88 23       	and	r24, r24
 10e:	f1 f0       	breq	.+60     	; 0x14c <button_get_states+0x70>
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	1c c0       	rjmp	.+56     	; 0x14c <button_get_states+0x70>
		
	    case button2 :
			if(button2_conn==button_pulldown)
			return dio_dioLevelReadChannel(DIO_PORTD,6);
			else 
			return !(dio_dioLevelReadChannel(DIO_PORTD,6));
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	66 e0       	ldi	r22, 0x06	; 6
 118:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <dio_dioLevelReadChannel>
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	88 23       	and	r24, r24
 120:	a9 f0       	breq	.+42     	; 0x14c <button_get_states+0x70>
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	13 c0       	rjmp	.+38     	; 0x14c <button_get_states+0x70>
		
	    case button3 :
		if(button3_conn==button_pulldown)
		return dio_dioLevelReadChannel(DIO_PORTD,5);
		else 
		return !(dio_dioLevelReadChannel(DIO_PORTD,5));
 126:	83 e0       	ldi	r24, 0x03	; 3
 128:	65 e0       	ldi	r22, 0x05	; 5
 12a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <dio_dioLevelReadChannel>
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	88 23       	and	r24, r24
 132:	61 f0       	breq	.+24     	; 0x14c <button_get_states+0x70>
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0a c0       	rjmp	.+20     	; 0x14c <button_get_states+0x70>
				
		case button4 :
		if(button4_conn==button_pulldown)
		return dio_dioLevelReadChannel(DIO_PORTD,3);
		else 
		return !dio_dioLevelReadChannel(DIO_PORTD,3);
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	63 e0       	ldi	r22, 0x03	; 3
 13c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <dio_dioLevelReadChannel>
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	88 23       	and	r24, r24
 144:	19 f0       	breq	.+6      	; 0x14c <button_get_states+0x70>
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	01 c0       	rjmp	.+2      	; 0x14c <button_get_states+0x70>
 14a:	01 c0       	rjmp	.+2      	; 0x14e <button_get_states+0x72>
					break ;
		
	}

}
 14c:	89 2f       	mov	r24, r25
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	31 f1       	breq	.+76     	; 0x1a8 <dio_vidConfigChannel+0x50>
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	38 f0       	brcs	.+14     	; 0x16e <dio_vidConfigChannel+0x16>
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	09 f4       	brne	.+2      	; 0x166 <dio_vidConfigChannel+0xe>
 164:	3e c0       	rjmp	.+124    	; 0x1e2 <dio_vidConfigChannel+0x8a>
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	09 f0       	breq	.+2      	; 0x16c <dio_vidConfigChannel+0x14>
 16a:	74 c0       	rjmp	.+232    	; 0x254 <dio_vidConfigChannel+0xfc>
 16c:	57 c0       	rjmp	.+174    	; 0x21c <dio_vidConfigChannel+0xc4>
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
 16e:	41 30       	cpi	r20, 0x01	; 1
 170:	69 f4       	brne	.+26     	; 0x18c <dio_vidConfigChannel+0x34>
		{
			SET_BIT (DIO_DDRA_REG,channel);
 172:	2a b3       	in	r18, 0x1a	; 26
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	ac 01       	movw	r20, r24
 17a:	02 c0       	rjmp	.+4      	; 0x180 <dio_vidConfigChannel+0x28>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <dio_vidConfigChannel+0x24>
 184:	ba 01       	movw	r22, r20
 186:	62 2b       	or	r22, r18
 188:	6a bb       	out	0x1a, r22	; 26
 18a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
 18c:	2a b3       	in	r18, 0x1a	; 26
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	ac 01       	movw	r20, r24
 194:	02 c0       	rjmp	.+4      	; 0x19a <dio_vidConfigChannel+0x42>
 196:	44 0f       	add	r20, r20
 198:	55 1f       	adc	r21, r21
 19a:	6a 95       	dec	r22
 19c:	e2 f7       	brpl	.-8      	; 0x196 <dio_vidConfigChannel+0x3e>
 19e:	ba 01       	movw	r22, r20
 1a0:	60 95       	com	r22
 1a2:	62 23       	and	r22, r18
 1a4:	6a bb       	out	0x1a, r22	; 26
 1a6:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
 1a8:	41 30       	cpi	r20, 0x01	; 1
 1aa:	69 f4       	brne	.+26     	; 0x1c6 <dio_vidConfigChannel+0x6e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
 1ac:	27 b3       	in	r18, 0x17	; 23
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	ac 01       	movw	r20, r24
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <dio_vidConfigChannel+0x62>
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <dio_vidConfigChannel+0x5e>
 1be:	ba 01       	movw	r22, r20
 1c0:	62 2b       	or	r22, r18
 1c2:	67 bb       	out	0x17, r22	; 23
 1c4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 1c6:	27 b3       	in	r18, 0x17	; 23
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	ac 01       	movw	r20, r24
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <dio_vidConfigChannel+0x7c>
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <dio_vidConfigChannel+0x78>
 1d8:	ba 01       	movw	r22, r20
 1da:	60 95       	com	r22
 1dc:	62 23       	and	r22, r18
 1de:	67 bb       	out	0x17, r22	; 23
 1e0:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 1e2:	41 30       	cpi	r20, 0x01	; 1
 1e4:	69 f4       	brne	.+26     	; 0x200 <dio_vidConfigChannel+0xa8>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 1e6:	24 b3       	in	r18, 0x14	; 20
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	ac 01       	movw	r20, r24
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <dio_vidConfigChannel+0x9c>
 1f0:	44 0f       	add	r20, r20
 1f2:	55 1f       	adc	r21, r21
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <dio_vidConfigChannel+0x98>
 1f8:	ba 01       	movw	r22, r20
 1fa:	62 2b       	or	r22, r18
 1fc:	64 bb       	out	0x14, r22	; 20
 1fe:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 200:	24 b3       	in	r18, 0x14	; 20
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <dio_vidConfigChannel+0xb6>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <dio_vidConfigChannel+0xb2>
 212:	ba 01       	movw	r22, r20
 214:	60 95       	com	r22
 216:	62 23       	and	r22, r18
 218:	64 bb       	out	0x14, r22	; 20
 21a:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 21c:	41 30       	cpi	r20, 0x01	; 1
 21e:	69 f4       	brne	.+26     	; 0x23a <dio_vidConfigChannel+0xe2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 220:	21 b3       	in	r18, 0x11	; 17
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	ac 01       	movw	r20, r24
 228:	02 c0       	rjmp	.+4      	; 0x22e <dio_vidConfigChannel+0xd6>
 22a:	44 0f       	add	r20, r20
 22c:	55 1f       	adc	r21, r21
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <dio_vidConfigChannel+0xd2>
 232:	ba 01       	movw	r22, r20
 234:	62 2b       	or	r22, r18
 236:	61 bb       	out	0x11, r22	; 17
 238:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 23a:	21 b3       	in	r18, 0x11	; 17
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	ac 01       	movw	r20, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <dio_vidConfigChannel+0xf0>
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <dio_vidConfigChannel+0xec>
 24c:	ba 01       	movw	r22, r20
 24e:	60 95       	com	r22
 250:	62 23       	and	r22, r18
 252:	61 bb       	out	0x11, r22	; 17
 254:	08 95       	ret

00000256 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	31 f1       	breq	.+76     	; 0x2a6 <dio_vidWriteChannel+0x50>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	38 f0       	brcs	.+14     	; 0x26c <dio_vidWriteChannel+0x16>
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	09 f4       	brne	.+2      	; 0x264 <dio_vidWriteChannel+0xe>
 262:	3e c0       	rjmp	.+124    	; 0x2e0 <dio_vidWriteChannel+0x8a>
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	09 f0       	breq	.+2      	; 0x26a <dio_vidWriteChannel+0x14>
 268:	74 c0       	rjmp	.+232    	; 0x352 <dio_vidWriteChannel+0xfc>
 26a:	57 c0       	rjmp	.+174    	; 0x31a <dio_vidWriteChannel+0xc4>
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 26c:	44 23       	and	r20, r20
 26e:	71 f4       	brne	.+28     	; 0x28c <dio_vidWriteChannel+0x36>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 270:	2b b3       	in	r18, 0x1b	; 27
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	ac 01       	movw	r20, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <dio_vidWriteChannel+0x28>
 27a:	44 0f       	add	r20, r20
 27c:	55 1f       	adc	r21, r21
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <dio_vidWriteChannel+0x24>
 282:	ba 01       	movw	r22, r20
 284:	60 95       	com	r22
 286:	62 23       	and	r22, r18
 288:	6b bb       	out	0x1b, r22	; 27
 28a:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 28c:	2b b3       	in	r18, 0x1b	; 27
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	ac 01       	movw	r20, r24
 294:	02 c0       	rjmp	.+4      	; 0x29a <dio_vidWriteChannel+0x44>
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <dio_vidWriteChannel+0x40>
 29e:	ba 01       	movw	r22, r20
 2a0:	62 2b       	or	r22, r18
 2a2:	6b bb       	out	0x1b, r22	; 27
 2a4:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 2a6:	44 23       	and	r20, r20
 2a8:	71 f4       	brne	.+28     	; 0x2c6 <dio_vidWriteChannel+0x70>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 2aa:	28 b3       	in	r18, 0x18	; 24
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	ac 01       	movw	r20, r24
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <dio_vidWriteChannel+0x62>
 2b4:	44 0f       	add	r20, r20
 2b6:	55 1f       	adc	r21, r21
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <dio_vidWriteChannel+0x5e>
 2bc:	ba 01       	movw	r22, r20
 2be:	60 95       	com	r22
 2c0:	62 23       	and	r22, r18
 2c2:	68 bb       	out	0x18, r22	; 24
 2c4:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 2c6:	28 b3       	in	r18, 0x18	; 24
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	ac 01       	movw	r20, r24
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <dio_vidWriteChannel+0x7e>
 2d0:	44 0f       	add	r20, r20
 2d2:	55 1f       	adc	r21, r21
 2d4:	6a 95       	dec	r22
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <dio_vidWriteChannel+0x7a>
 2d8:	ba 01       	movw	r22, r20
 2da:	62 2b       	or	r22, r18
 2dc:	68 bb       	out	0x18, r22	; 24
 2de:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 2e0:	44 23       	and	r20, r20
 2e2:	71 f4       	brne	.+28     	; 0x300 <dio_vidWriteChannel+0xaa>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 2e4:	25 b3       	in	r18, 0x15	; 21
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	ac 01       	movw	r20, r24
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <dio_vidWriteChannel+0x9c>
 2ee:	44 0f       	add	r20, r20
 2f0:	55 1f       	adc	r21, r21
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <dio_vidWriteChannel+0x98>
 2f6:	ba 01       	movw	r22, r20
 2f8:	60 95       	com	r22
 2fa:	62 23       	and	r22, r18
 2fc:	65 bb       	out	0x15, r22	; 21
 2fe:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 300:	25 b3       	in	r18, 0x15	; 21
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	ac 01       	movw	r20, r24
 308:	02 c0       	rjmp	.+4      	; 0x30e <dio_vidWriteChannel+0xb8>
 30a:	44 0f       	add	r20, r20
 30c:	55 1f       	adc	r21, r21
 30e:	6a 95       	dec	r22
 310:	e2 f7       	brpl	.-8      	; 0x30a <dio_vidWriteChannel+0xb4>
 312:	ba 01       	movw	r22, r20
 314:	62 2b       	or	r22, r18
 316:	65 bb       	out	0x15, r22	; 21
 318:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 31a:	44 23       	and	r20, r20
 31c:	71 f4       	brne	.+28     	; 0x33a <dio_vidWriteChannel+0xe4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 31e:	22 b3       	in	r18, 0x12	; 18
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	ac 01       	movw	r20, r24
 326:	02 c0       	rjmp	.+4      	; 0x32c <dio_vidWriteChannel+0xd6>
 328:	44 0f       	add	r20, r20
 32a:	55 1f       	adc	r21, r21
 32c:	6a 95       	dec	r22
 32e:	e2 f7       	brpl	.-8      	; 0x328 <dio_vidWriteChannel+0xd2>
 330:	ba 01       	movw	r22, r20
 332:	60 95       	com	r22
 334:	62 23       	and	r22, r18
 336:	62 bb       	out	0x12, r22	; 18
 338:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 33a:	22 b3       	in	r18, 0x12	; 18
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	ac 01       	movw	r20, r24
 342:	02 c0       	rjmp	.+4      	; 0x348 <dio_vidWriteChannel+0xf2>
 344:	44 0f       	add	r20, r20
 346:	55 1f       	adc	r21, r21
 348:	6a 95       	dec	r22
 34a:	e2 f7       	brpl	.-8      	; 0x344 <dio_vidWriteChannel+0xee>
 34c:	ba 01       	movw	r22, r20
 34e:	62 2b       	or	r22, r18
 350:	62 bb       	out	0x12, r22	; 18
 352:	08 95       	ret

00000354 <dio_vidWriteChannelGroup>:
*******************************************************************************/
void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask)
{
	/*	show me your code */
	
}
 354:	08 95       	ret

00000356 <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	a1 f0       	breq	.+40     	; 0x382 <dio_vidFlipChannel+0x2c>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	28 f0       	brcs	.+10     	; 0x368 <dio_vidFlipChannel+0x12>
 35e:	82 30       	cpi	r24, 0x02	; 2
 360:	e9 f0       	breq	.+58     	; 0x39c <dio_vidFlipChannel+0x46>
 362:	83 30       	cpi	r24, 0x03	; 3
 364:	a1 f5       	brne	.+104    	; 0x3ce <dio_vidFlipChannel+0x78>
 366:	27 c0       	rjmp	.+78     	; 0x3b6 <dio_vidFlipChannel+0x60>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,channel);
 368:	2b b3       	in	r18, 0x1b	; 27
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	ac 01       	movw	r20, r24
 370:	02 c0       	rjmp	.+4      	; 0x376 <dio_vidFlipChannel+0x20>
 372:	44 0f       	add	r20, r20
 374:	55 1f       	adc	r21, r21
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <dio_vidFlipChannel+0x1c>
 37a:	ba 01       	movw	r22, r20
 37c:	62 27       	eor	r22, r18
 37e:	6b bb       	out	0x1b, r22	; 27
		break;
 380:	08 95       	ret

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 382:	28 b3       	in	r18, 0x18	; 24
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	ac 01       	movw	r20, r24
 38a:	02 c0       	rjmp	.+4      	; 0x390 <dio_vidFlipChannel+0x3a>
 38c:	44 0f       	add	r20, r20
 38e:	55 1f       	adc	r21, r21
 390:	6a 95       	dec	r22
 392:	e2 f7       	brpl	.-8      	; 0x38c <dio_vidFlipChannel+0x36>
 394:	ba 01       	movw	r22, r20
 396:	62 27       	eor	r22, r18
 398:	68 bb       	out	0x18, r22	; 24
		break;
 39a:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 39c:	25 b3       	in	r18, 0x15	; 21
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	ac 01       	movw	r20, r24
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <dio_vidFlipChannel+0x54>
 3a6:	44 0f       	add	r20, r20
 3a8:	55 1f       	adc	r21, r21
 3aa:	6a 95       	dec	r22
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <dio_vidFlipChannel+0x50>
 3ae:	ba 01       	movw	r22, r20
 3b0:	62 27       	eor	r22, r18
 3b2:	65 bb       	out	0x15, r22	; 21
		break;
 3b4:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 3b6:	22 b3       	in	r18, 0x12	; 18
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	ac 01       	movw	r20, r24
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <dio_vidFlipChannel+0x6e>
 3c0:	44 0f       	add	r20, r20
 3c2:	55 1f       	adc	r21, r21
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <dio_vidFlipChannel+0x6a>
 3c8:	ba 01       	movw	r22, r20
 3ca:	62 27       	eor	r22, r18
 3cc:	62 bb       	out	0x12, r22	; 18
 3ce:	08 95       	ret

000003d0 <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	89 f0       	breq	.+34     	; 0x3f6 <dio_dioLevelReadChannel+0x26>
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	28 f0       	brcs	.+10     	; 0x3e2 <dio_dioLevelReadChannel+0x12>
 3d8:	82 30       	cpi	r24, 0x02	; 2
 3da:	b9 f0       	breq	.+46     	; 0x40a <dio_dioLevelReadChannel+0x3a>
 3dc:	83 30       	cpi	r24, 0x03	; 3
 3de:	49 f5       	brne	.+82     	; 0x432 <dio_dioLevelReadChannel+0x62>
 3e0:	1e c0       	rjmp	.+60     	; 0x41e <dio_dioLevelReadChannel+0x4e>
	{
	 case DIO_PORTA:
		loc_pinRead = CHECK_BIT(DIO_PINA_REG, channel);
 3e2:	29 b3       	in	r18, 0x19	; 25
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	c9 01       	movw	r24, r18
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <dio_dioLevelReadChannel+0x1e>
 3ea:	95 95       	asr	r25
 3ec:	87 95       	ror	r24
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <dio_dioLevelReadChannel+0x1a>
 3f2:	81 70       	andi	r24, 0x01	; 1
		break;
 3f4:	08 95       	ret

	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
 3f6:	26 b3       	in	r18, 0x16	; 22
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	c9 01       	movw	r24, r18
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <dio_dioLevelReadChannel+0x32>
 3fe:	95 95       	asr	r25
 400:	87 95       	ror	r24
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <dio_dioLevelReadChannel+0x2e>
 406:	81 70       	andi	r24, 0x01	; 1
		break;
 408:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
 40a:	23 b3       	in	r18, 0x13	; 19
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	c9 01       	movw	r24, r18
 410:	02 c0       	rjmp	.+4      	; 0x416 <dio_dioLevelReadChannel+0x46>
 412:	95 95       	asr	r25
 414:	87 95       	ror	r24
 416:	6a 95       	dec	r22
 418:	e2 f7       	brpl	.-8      	; 0x412 <dio_dioLevelReadChannel+0x42>
 41a:	81 70       	andi	r24, 0x01	; 1
		break;
 41c:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
 41e:	20 b3       	in	r18, 0x10	; 16
 420:	30 e0       	ldi	r19, 0x00	; 0
 422:	c9 01       	movw	r24, r18
 424:	02 c0       	rjmp	.+4      	; 0x42a <dio_dioLevelReadChannel+0x5a>
 426:	95 95       	asr	r25
 428:	87 95       	ror	r24
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <dio_dioLevelReadChannel+0x56>
 42e:	81 70       	andi	r24, 0x01	; 1
		break;
 430:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 432:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
		break;
    }
	return loc_pinRead;
}
 434:	08 95       	ret

00000436 <dio_vidEnablePullUp>:
* \Return value:   : None                            
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */	
	switch (port)
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	f9 f0       	breq	.+62     	; 0x478 <dio_vidEnablePullUp+0x42>
 43a:	81 30       	cpi	r24, 0x01	; 1
 43c:	30 f0       	brcs	.+12     	; 0x44a <dio_vidEnablePullUp+0x14>
 43e:	82 30       	cpi	r24, 0x02	; 2
 440:	91 f1       	breq	.+100    	; 0x4a6 <dio_vidEnablePullUp+0x70>
 442:	83 30       	cpi	r24, 0x03	; 3
 444:	09 f0       	breq	.+2      	; 0x448 <dio_vidEnablePullUp+0x12>
 446:	5c c0       	rjmp	.+184    	; 0x500 <dio_vidEnablePullUp+0xca>
 448:	45 c0       	rjmp	.+138    	; 0x4d4 <dio_vidEnablePullUp+0x9e>
	{
		case DIO_PORTA:
		if( !CHECK_BIT(DIO_DDRA_REG, channel))
 44a:	8a b3       	in	r24, 0x1a	; 26
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	06 2e       	mov	r0, r22
 450:	02 c0       	rjmp	.+4      	; 0x456 <dio_vidEnablePullUp+0x20>
 452:	95 95       	asr	r25
 454:	87 95       	ror	r24
 456:	0a 94       	dec	r0
 458:	e2 f7       	brpl	.-8      	; 0x452 <dio_vidEnablePullUp+0x1c>
 45a:	80 fd       	sbrc	r24, 0
 45c:	51 c0       	rjmp	.+162    	; 0x500 <dio_vidEnablePullUp+0xca>
		    SET_BIT(DIO_PORTA_REG, channel);
 45e:	2b b3       	in	r18, 0x1b	; 27
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	ac 01       	movw	r20, r24
 466:	02 c0       	rjmp	.+4      	; 0x46c <dio_vidEnablePullUp+0x36>
 468:	44 0f       	add	r20, r20
 46a:	55 1f       	adc	r21, r21
 46c:	6a 95       	dec	r22
 46e:	e2 f7       	brpl	.-8      	; 0x468 <dio_vidEnablePullUp+0x32>
 470:	ba 01       	movw	r22, r20
 472:	62 2b       	or	r22, r18
 474:	6b bb       	out	0x1b, r22	; 27
 476:	08 95       	ret
		break;

		case DIO_PORTB:
		if( !CHECK_BIT(DIO_DDRB_REG, channel))
 478:	87 b3       	in	r24, 0x17	; 23
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	06 2e       	mov	r0, r22
 47e:	02 c0       	rjmp	.+4      	; 0x484 <dio_vidEnablePullUp+0x4e>
 480:	95 95       	asr	r25
 482:	87 95       	ror	r24
 484:	0a 94       	dec	r0
 486:	e2 f7       	brpl	.-8      	; 0x480 <dio_vidEnablePullUp+0x4a>
 488:	80 fd       	sbrc	r24, 0
 48a:	3a c0       	rjmp	.+116    	; 0x500 <dio_vidEnablePullUp+0xca>
		SET_BIT(DIO_PORTB_REG, channel);
 48c:	28 b3       	in	r18, 0x18	; 24
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	ac 01       	movw	r20, r24
 494:	02 c0       	rjmp	.+4      	; 0x49a <dio_vidEnablePullUp+0x64>
 496:	44 0f       	add	r20, r20
 498:	55 1f       	adc	r21, r21
 49a:	6a 95       	dec	r22
 49c:	e2 f7       	brpl	.-8      	; 0x496 <dio_vidEnablePullUp+0x60>
 49e:	ba 01       	movw	r22, r20
 4a0:	62 2b       	or	r22, r18
 4a2:	68 bb       	out	0x18, r22	; 24
 4a4:	08 95       	ret
		break;

		case DIO_PORTC:
		if( !CHECK_BIT(DIO_DDRC_REG, channel))
 4a6:	84 b3       	in	r24, 0x14	; 20
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	06 2e       	mov	r0, r22
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <dio_vidEnablePullUp+0x7c>
 4ae:	95 95       	asr	r25
 4b0:	87 95       	ror	r24
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <dio_vidEnablePullUp+0x78>
 4b6:	80 fd       	sbrc	r24, 0
 4b8:	23 c0       	rjmp	.+70     	; 0x500 <dio_vidEnablePullUp+0xca>
		   SET_BIT(DIO_PORTC_REG, channel);
 4ba:	25 b3       	in	r18, 0x15	; 21
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	ac 01       	movw	r20, r24
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <dio_vidEnablePullUp+0x92>
 4c4:	44 0f       	add	r20, r20
 4c6:	55 1f       	adc	r21, r21
 4c8:	6a 95       	dec	r22
 4ca:	e2 f7       	brpl	.-8      	; 0x4c4 <dio_vidEnablePullUp+0x8e>
 4cc:	ba 01       	movw	r22, r20
 4ce:	62 2b       	or	r22, r18
 4d0:	65 bb       	out	0x15, r22	; 21
 4d2:	08 95       	ret
		break;

		case DIO_PORTD:
		if(! CHECK_BIT(DIO_DDRD_REG, channel))
 4d4:	81 b3       	in	r24, 0x11	; 17
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	06 2e       	mov	r0, r22
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <dio_vidEnablePullUp+0xaa>
 4dc:	95 95       	asr	r25
 4de:	87 95       	ror	r24
 4e0:	0a 94       	dec	r0
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <dio_vidEnablePullUp+0xa6>
 4e4:	80 fd       	sbrc	r24, 0
 4e6:	0c c0       	rjmp	.+24     	; 0x500 <dio_vidEnablePullUp+0xca>
		     SET_BIT(DIO_PORTD_REG, channel);
 4e8:	22 b3       	in	r18, 0x12	; 18
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	ac 01       	movw	r20, r24
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <dio_vidEnablePullUp+0xc0>
 4f2:	44 0f       	add	r20, r20
 4f4:	55 1f       	adc	r21, r21
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <dio_vidEnablePullUp+0xbc>
 4fa:	ba 01       	movw	r22, r20
 4fc:	62 2b       	or	r22, r18
 4fe:	62 bb       	out	0x12, r22	; 18
 500:	08 95       	ret

00000502 <led_init>:
* \Parameters (in) : parameterName   Parameter Describtion                                                                         
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void led_init(void) 
{  dio_vidConfigChannel(DIO_PORTB,7,OUTPUT);
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	67 e0       	ldi	r22, 0x07	; 7
 506:	41 e0       	ldi	r20, 0x01	; 1
 508:	0e 94 ac 00 	call	0x158	; 0x158 <dio_vidConfigChannel>
	dio_vidConfigChannel(DIO_PORTA,4,OUTPUT);
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	64 e0       	ldi	r22, 0x04	; 4
 510:	41 e0       	ldi	r20, 0x01	; 1
 512:	0e 94 ac 00 	call	0x158	; 0x158 <dio_vidConfigChannel>
	dio_vidConfigChannel(DIO_PORTA,5,OUTPUT);
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	65 e0       	ldi	r22, 0x05	; 5
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	0e 94 ac 00 	call	0x158	; 0x158 <dio_vidConfigChannel>
	dio_vidConfigChannel(DIO_PORTA,6,OUTPUT);
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	66 e0       	ldi	r22, 0x06	; 6
 524:	41 e0       	ldi	r20, 0x01	; 1
 526:	0e 94 ac 00 	call	0x158	; 0x158 <dio_vidConfigChannel>
	
}
 52a:	08 95       	ret

0000052c <led_on>:
*                                    E_NOT_OK
*******************************************************************************/

void led_on(led_ID id)
{
	switch(id)
 52c:	82 30       	cpi	r24, 0x02	; 2
 52e:	81 f0       	breq	.+32     	; 0x550 <led_on+0x24>
 530:	83 30       	cpi	r24, 0x03	; 3
 532:	18 f4       	brcc	.+6      	; 0x53a <led_on+0xe>
 534:	81 30       	cpi	r24, 0x01	; 1
 536:	e9 f4       	brne	.+58     	; 0x572 <led_on+0x46>
 538:	05 c0       	rjmp	.+10     	; 0x544 <led_on+0x18>
 53a:	83 30       	cpi	r24, 0x03	; 3
 53c:	79 f0       	breq	.+30     	; 0x55c <led_on+0x30>
 53e:	84 30       	cpi	r24, 0x04	; 4
 540:	c1 f4       	brne	.+48     	; 0x572 <led_on+0x46>
 542:	12 c0       	rjmp	.+36     	; 0x568 <led_on+0x3c>
	{
		case led1:
		//if(led_source)
		 dio_vidWriteChannel(DIO_PORTB,7,led1_state);
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	67 e0       	ldi	r22, 0x07	; 7
 548:	41 e0       	ldi	r20, 0x01	; 1
 54a:	0e 94 2b 01 	call	0x256	; 0x256 <dio_vidWriteChannel>
		// else 
		// dio_vidWriteChannel(DIO_PORTB,7,STD_LOW);
		break ;
 54e:	08 95       	ret
		case led2:
		//if(led_source)
		dio_vidWriteChannel(DIO_PORTA,4,led2_state);
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	64 e0       	ldi	r22, 0x04	; 4
 554:	41 e0       	ldi	r20, 0x01	; 1
 556:	0e 94 2b 01 	call	0x256	; 0x256 <dio_vidWriteChannel>
		//else
		//dio_vidWriteChannel(DIO_PORTA,4,STD_LOW);
		break ;
 55a:	08 95       	ret
		case led3:
		//if(led_source)
		dio_vidWriteChannel(DIO_PORTA,5,led3_state);
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	65 e0       	ldi	r22, 0x05	; 5
 560:	41 e0       	ldi	r20, 0x01	; 1
 562:	0e 94 2b 01 	call	0x256	; 0x256 <dio_vidWriteChannel>
		//else
		//dio_vidWriteChannel(DIO_PORTA,5,STD_LOW);
		break ;
 566:	08 95       	ret
		case led4:
		//if(led_source)
		dio_vidWriteChannel(DIO_PORTA,6,led4_state);
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	66 e0       	ldi	r22, 0x06	; 6
 56c:	41 e0       	ldi	r20, 0x01	; 1
 56e:	0e 94 2b 01 	call	0x256	; 0x256 <dio_vidWriteChannel>
 572:	08 95       	ret

00000574 <led_off>:



void led_off(led_ID id)
{
	switch(id)
 574:	82 30       	cpi	r24, 0x02	; 2
 576:	81 f0       	breq	.+32     	; 0x598 <led_off+0x24>
 578:	83 30       	cpi	r24, 0x03	; 3
 57a:	18 f4       	brcc	.+6      	; 0x582 <led_off+0xe>
 57c:	81 30       	cpi	r24, 0x01	; 1
 57e:	e9 f4       	brne	.+58     	; 0x5ba <led_off+0x46>
 580:	05 c0       	rjmp	.+10     	; 0x58c <led_off+0x18>
 582:	83 30       	cpi	r24, 0x03	; 3
 584:	79 f0       	breq	.+30     	; 0x5a4 <led_off+0x30>
 586:	84 30       	cpi	r24, 0x04	; 4
 588:	c1 f4       	brne	.+48     	; 0x5ba <led_off+0x46>
 58a:	12 c0       	rjmp	.+36     	; 0x5b0 <led_off+0x3c>
	{
		case led1:
		if(led_source)
		dio_vidWriteChannel(DIO_PORTB,7,STD_LOW);
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	67 e0       	ldi	r22, 0x07	; 7
 590:	40 e0       	ldi	r20, 0x00	; 0
 592:	0e 94 2b 01 	call	0x256	; 0x256 <dio_vidWriteChannel>
		else
		dio_vidWriteChannel(DIO_PORTB,7,STD_HIGH);
		break ;
 596:	08 95       	ret
		case led2:
		if(led_source)
		dio_vidWriteChannel(DIO_PORTA,4,STD_LOW);
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	64 e0       	ldi	r22, 0x04	; 4
 59c:	40 e0       	ldi	r20, 0x00	; 0
 59e:	0e 94 2b 01 	call	0x256	; 0x256 <dio_vidWriteChannel>
		else
		dio_vidWriteChannel(DIO_PORTA,4,STD_HIGH);
		break ;
 5a2:	08 95       	ret
		case led3:
		if(led_source)
		dio_vidWriteChannel(DIO_PORTA,5,STD_LOW);
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	65 e0       	ldi	r22, 0x05	; 5
 5a8:	40 e0       	ldi	r20, 0x00	; 0
 5aa:	0e 94 2b 01 	call	0x256	; 0x256 <dio_vidWriteChannel>
		else
		dio_vidWriteChannel(DIO_PORTA,5,STD_HIGH);
		break ;
 5ae:	08 95       	ret
		case led4:
		if(led_source)
		dio_vidWriteChannel(DIO_PORTA,6,STD_LOW);
 5b0:	80 e0       	ldi	r24, 0x00	; 0
 5b2:	66 e0       	ldi	r22, 0x06	; 6
 5b4:	40 e0       	ldi	r20, 0x00	; 0
 5b6:	0e 94 2b 01 	call	0x256	; 0x256 <dio_vidWriteChannel>
 5ba:	08 95       	ret

000005bc <led_toggle>:
}


void led_toggle(led_ID id)
{
	switch(id)
 5bc:	82 30       	cpi	r24, 0x02	; 2
 5be:	79 f0       	breq	.+30     	; 0x5de <led_toggle+0x22>
 5c0:	83 30       	cpi	r24, 0x03	; 3
 5c2:	18 f4       	brcc	.+6      	; 0x5ca <led_toggle+0xe>
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	c9 f4       	brne	.+50     	; 0x5fa <led_toggle+0x3e>
 5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <led_toggle+0x18>
 5ca:	83 30       	cpi	r24, 0x03	; 3
 5cc:	69 f0       	breq	.+26     	; 0x5e8 <led_toggle+0x2c>
 5ce:	84 30       	cpi	r24, 0x04	; 4
 5d0:	a1 f4       	brne	.+40     	; 0x5fa <led_toggle+0x3e>
 5d2:	0f c0       	rjmp	.+30     	; 0x5f2 <led_toggle+0x36>
	{
		case led1:
		dio_vidFlipChannel(DIO_PORTB,7);
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	67 e0       	ldi	r22, 0x07	; 7
 5d8:	0e 94 ab 01 	call	0x356	; 0x356 <dio_vidFlipChannel>
		break ;
 5dc:	08 95       	ret
		case led2:
		dio_vidFlipChannel(DIO_PORTA,4);
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	64 e0       	ldi	r22, 0x04	; 4
 5e2:	0e 94 ab 01 	call	0x356	; 0x356 <dio_vidFlipChannel>
		break ;
 5e6:	08 95       	ret
		case led3:
		dio_vidFlipChannel(DIO_PORTA,5);
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	65 e0       	ldi	r22, 0x05	; 5
 5ec:	0e 94 ab 01 	call	0x356	; 0x356 <dio_vidFlipChannel>
		break ;
 5f0:	08 95       	ret
		case led4:
		dio_vidFlipChannel(DIO_PORTA,6);
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	66 e0       	ldi	r22, 0x06	; 6
 5f6:	0e 94 ab 01 	call	0x356	; 0x356 <dio_vidFlipChannel>
 5fa:	08 95       	ret

000005fc <main>:


#include "dio.h"
#include "led.h"
int main(void)
{ led_init();
 5fc:	0e 94 81 02 	call	0x502	; 0x502 <led_init>
	dio_vidConfigChannel(DIO_PORTB,7,OUTPUT);
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	67 e0       	ldi	r22, 0x07	; 7
 604:	41 e0       	ldi	r20, 0x01	; 1
 606:	0e 94 ac 00 	call	0x158	; 0x158 <dio_vidConfigChannel>
	
	dio_vidConfigChannel(DIO_PORTD,7,INPUT);
 60a:	83 e0       	ldi	r24, 0x03	; 3
 60c:	67 e0       	ldi	r22, 0x07	; 7
 60e:	40 e0       	ldi	r20, 0x00	; 0
 610:	0e 94 ac 00 	call	0x158	; 0x158 <dio_vidConfigChannel>
	dio_vidEnablePullUp(DIO_PORTD,7);
 614:	83 e0       	ldi	r24, 0x03	; 3
 616:	67 e0       	ldi	r22, 0x07	; 7
 618:	0e 94 1b 02 	call	0x436	; 0x436 <dio_vidEnablePullUp>
    while(1)
    {     if( ! dio_dioLevelReadChannel(DIO_PORTD,7))
 61c:	83 e0       	ldi	r24, 0x03	; 3
 61e:	67 e0       	ldi	r22, 0x07	; 7
 620:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <dio_dioLevelReadChannel>
 624:	88 23       	and	r24, r24
 626:	69 f4       	brne	.+26     	; 0x642 <main+0x46>
		 {led_on(led1);
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	0e 94 96 02 	call	0x52c	; 0x52c <led_on>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 62e:	8f ef       	ldi	r24, 0xFF	; 255
 630:	99 e6       	ldi	r25, 0x69	; 105
 632:	a8 e1       	ldi	r26, 0x18	; 24
 634:	81 50       	subi	r24, 0x01	; 1
 636:	90 40       	sbci	r25, 0x00	; 0
 638:	a0 40       	sbci	r26, 0x00	; 0
 63a:	e1 f7       	brne	.-8      	; 0x634 <main+0x38>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <main+0x42>
 63e:	00 00       	nop
 640:	ed cf       	rjmp	.-38     	; 0x61c <main+0x20>
		 _delay_ms(500); }
		 else
		{ led_off(led1);
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	0e 94 ba 02 	call	0x574	; 0x574 <led_off>
 648:	8f ef       	ldi	r24, 0xFF	; 255
 64a:	99 e6       	ldi	r25, 0x69	; 105
 64c:	a8 e1       	ldi	r26, 0x18	; 24
 64e:	81 50       	subi	r24, 0x01	; 1
 650:	90 40       	sbci	r25, 0x00	; 0
 652:	a0 40       	sbci	r26, 0x00	; 0
 654:	e1 f7       	brne	.-8      	; 0x64e <main+0x52>
 656:	00 c0       	rjmp	.+0      	; 0x658 <main+0x5c>
 658:	00 00       	nop
 65a:	e0 cf       	rjmp	.-64     	; 0x61c <main+0x20>

0000065c <_exit>:
 65c:	f8 94       	cli

0000065e <__stop_program>:
 65e:	ff cf       	rjmp	.-2      	; 0x65e <__stop_program>
