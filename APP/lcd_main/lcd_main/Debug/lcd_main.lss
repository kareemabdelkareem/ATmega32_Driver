
lcd_main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000544  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000544  000005b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00000d10  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ad  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002aa  00000000  00000000  0000167d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000436  00000000  00000000  00001927  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  00001d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000345  00000000  00000000  00001e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000470  00000000  00000000  000021b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9f 02 	call	0x53e	; 0x53e <main>
  8a:	0c 94 a0 02 	jmp	0x540	; 0x540 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	31 f1       	breq	.+76     	; 0xe2 <dio_vidConfigChannel+0x50>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	38 f0       	brcs	.+14     	; 0xa8 <dio_vidConfigChannel+0x16>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	09 f4       	brne	.+2      	; 0xa0 <dio_vidConfigChannel+0xe>
  9e:	3e c0       	rjmp	.+124    	; 0x11c <dio_vidConfigChannel+0x8a>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	09 f0       	breq	.+2      	; 0xa6 <dio_vidConfigChannel+0x14>
  a4:	74 c0       	rjmp	.+232    	; 0x18e <dio_vidConfigChannel+0xfc>
  a6:	57 c0       	rjmp	.+174    	; 0x156 <dio_vidConfigChannel+0xc4>
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	69 f4       	brne	.+26     	; 0xc6 <dio_vidConfigChannel+0x34>
		{
			SET_BIT (DIO_DDRA_REG,channel);
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	ac 01       	movw	r20, r24
  b4:	02 c0       	rjmp	.+4      	; 0xba <dio_vidConfigChannel+0x28>
  b6:	44 0f       	add	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <dio_vidConfigChannel+0x24>
  be:	ba 01       	movw	r22, r20
  c0:	62 2b       	or	r22, r18
  c2:	6a bb       	out	0x1a, r22	; 26
  c4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
  c6:	2a b3       	in	r18, 0x1a	; 26
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	ac 01       	movw	r20, r24
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <dio_vidConfigChannel+0x42>
  d0:	44 0f       	add	r20, r20
  d2:	55 1f       	adc	r21, r21
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <dio_vidConfigChannel+0x3e>
  d8:	ba 01       	movw	r22, r20
  da:	60 95       	com	r22
  dc:	62 23       	and	r22, r18
  de:	6a bb       	out	0x1a, r22	; 26
  e0:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	69 f4       	brne	.+26     	; 0x100 <dio_vidConfigChannel+0x6e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	ac 01       	movw	r20, r24
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <dio_vidConfigChannel+0x62>
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <dio_vidConfigChannel+0x5e>
  f8:	ba 01       	movw	r22, r20
  fa:	62 2b       	or	r22, r18
  fc:	67 bb       	out	0x17, r22	; 23
  fe:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 100:	27 b3       	in	r18, 0x17	; 23
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	ac 01       	movw	r20, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <dio_vidConfigChannel+0x7c>
 10a:	44 0f       	add	r20, r20
 10c:	55 1f       	adc	r21, r21
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <dio_vidConfigChannel+0x78>
 112:	ba 01       	movw	r22, r20
 114:	60 95       	com	r22
 116:	62 23       	and	r22, r18
 118:	67 bb       	out	0x17, r22	; 23
 11a:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	69 f4       	brne	.+26     	; 0x13a <dio_vidConfigChannel+0xa8>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 120:	24 b3       	in	r18, 0x14	; 20
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	ac 01       	movw	r20, r24
 128:	02 c0       	rjmp	.+4      	; 0x12e <dio_vidConfigChannel+0x9c>
 12a:	44 0f       	add	r20, r20
 12c:	55 1f       	adc	r21, r21
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <dio_vidConfigChannel+0x98>
 132:	ba 01       	movw	r22, r20
 134:	62 2b       	or	r22, r18
 136:	64 bb       	out	0x14, r22	; 20
 138:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 13a:	24 b3       	in	r18, 0x14	; 20
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	ac 01       	movw	r20, r24
 142:	02 c0       	rjmp	.+4      	; 0x148 <dio_vidConfigChannel+0xb6>
 144:	44 0f       	add	r20, r20
 146:	55 1f       	adc	r21, r21
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <dio_vidConfigChannel+0xb2>
 14c:	ba 01       	movw	r22, r20
 14e:	60 95       	com	r22
 150:	62 23       	and	r22, r18
 152:	64 bb       	out	0x14, r22	; 20
 154:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	69 f4       	brne	.+26     	; 0x174 <dio_vidConfigChannel+0xe2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	ac 01       	movw	r20, r24
 162:	02 c0       	rjmp	.+4      	; 0x168 <dio_vidConfigChannel+0xd6>
 164:	44 0f       	add	r20, r20
 166:	55 1f       	adc	r21, r21
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <dio_vidConfigChannel+0xd2>
 16c:	ba 01       	movw	r22, r20
 16e:	62 2b       	or	r22, r18
 170:	61 bb       	out	0x11, r22	; 17
 172:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 174:	21 b3       	in	r18, 0x11	; 17
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ac 01       	movw	r20, r24
 17c:	02 c0       	rjmp	.+4      	; 0x182 <dio_vidConfigChannel+0xf0>
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <dio_vidConfigChannel+0xec>
 186:	ba 01       	movw	r22, r20
 188:	60 95       	com	r22
 18a:	62 23       	and	r22, r18
 18c:	61 bb       	out	0x11, r22	; 17
 18e:	08 95       	ret

00000190 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	31 f1       	breq	.+76     	; 0x1e0 <dio_vidWriteChannel+0x50>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	38 f0       	brcs	.+14     	; 0x1a6 <dio_vidWriteChannel+0x16>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	09 f4       	brne	.+2      	; 0x19e <dio_vidWriteChannel+0xe>
 19c:	3e c0       	rjmp	.+124    	; 0x21a <dio_vidWriteChannel+0x8a>
 19e:	83 30       	cpi	r24, 0x03	; 3
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <dio_vidWriteChannel+0x14>
 1a2:	74 c0       	rjmp	.+232    	; 0x28c <dio_vidWriteChannel+0xfc>
 1a4:	57 c0       	rjmp	.+174    	; 0x254 <dio_vidWriteChannel+0xc4>
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 1a6:	44 23       	and	r20, r20
 1a8:	71 f4       	brne	.+28     	; 0x1c6 <dio_vidWriteChannel+0x36>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 1aa:	2b b3       	in	r18, 0x1b	; 27
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	ac 01       	movw	r20, r24
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <dio_vidWriteChannel+0x28>
 1b4:	44 0f       	add	r20, r20
 1b6:	55 1f       	adc	r21, r21
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <dio_vidWriteChannel+0x24>
 1bc:	ba 01       	movw	r22, r20
 1be:	60 95       	com	r22
 1c0:	62 23       	and	r22, r18
 1c2:	6b bb       	out	0x1b, r22	; 27
 1c4:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 1c6:	2b b3       	in	r18, 0x1b	; 27
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	ac 01       	movw	r20, r24
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <dio_vidWriteChannel+0x44>
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <dio_vidWriteChannel+0x40>
 1d8:	ba 01       	movw	r22, r20
 1da:	62 2b       	or	r22, r18
 1dc:	6b bb       	out	0x1b, r22	; 27
 1de:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 1e0:	44 23       	and	r20, r20
 1e2:	71 f4       	brne	.+28     	; 0x200 <dio_vidWriteChannel+0x70>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 1e4:	28 b3       	in	r18, 0x18	; 24
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	ac 01       	movw	r20, r24
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <dio_vidWriteChannel+0x62>
 1ee:	44 0f       	add	r20, r20
 1f0:	55 1f       	adc	r21, r21
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <dio_vidWriteChannel+0x5e>
 1f6:	ba 01       	movw	r22, r20
 1f8:	60 95       	com	r22
 1fa:	62 23       	and	r22, r18
 1fc:	68 bb       	out	0x18, r22	; 24
 1fe:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 200:	28 b3       	in	r18, 0x18	; 24
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <dio_vidWriteChannel+0x7e>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <dio_vidWriteChannel+0x7a>
 212:	ba 01       	movw	r22, r20
 214:	62 2b       	or	r22, r18
 216:	68 bb       	out	0x18, r22	; 24
 218:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 21a:	44 23       	and	r20, r20
 21c:	71 f4       	brne	.+28     	; 0x23a <dio_vidWriteChannel+0xaa>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 21e:	25 b3       	in	r18, 0x15	; 21
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	ac 01       	movw	r20, r24
 226:	02 c0       	rjmp	.+4      	; 0x22c <dio_vidWriteChannel+0x9c>
 228:	44 0f       	add	r20, r20
 22a:	55 1f       	adc	r21, r21
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <dio_vidWriteChannel+0x98>
 230:	ba 01       	movw	r22, r20
 232:	60 95       	com	r22
 234:	62 23       	and	r22, r18
 236:	65 bb       	out	0x15, r22	; 21
 238:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 23a:	25 b3       	in	r18, 0x15	; 21
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	ac 01       	movw	r20, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <dio_vidWriteChannel+0xb8>
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <dio_vidWriteChannel+0xb4>
 24c:	ba 01       	movw	r22, r20
 24e:	62 2b       	or	r22, r18
 250:	65 bb       	out	0x15, r22	; 21
 252:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 254:	44 23       	and	r20, r20
 256:	71 f4       	brne	.+28     	; 0x274 <dio_vidWriteChannel+0xe4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 258:	22 b3       	in	r18, 0x12	; 18
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	ac 01       	movw	r20, r24
 260:	02 c0       	rjmp	.+4      	; 0x266 <dio_vidWriteChannel+0xd6>
 262:	44 0f       	add	r20, r20
 264:	55 1f       	adc	r21, r21
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <dio_vidWriteChannel+0xd2>
 26a:	ba 01       	movw	r22, r20
 26c:	60 95       	com	r22
 26e:	62 23       	and	r22, r18
 270:	62 bb       	out	0x12, r22	; 18
 272:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 274:	22 b3       	in	r18, 0x12	; 18
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	ac 01       	movw	r20, r24
 27c:	02 c0       	rjmp	.+4      	; 0x282 <dio_vidWriteChannel+0xf2>
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <dio_vidWriteChannel+0xee>
 286:	ba 01       	movw	r22, r20
 288:	62 2b       	or	r22, r18
 28a:	62 bb       	out	0x12, r22	; 18
 28c:	08 95       	ret

0000028e <dio_vidWriteChannelGroup>:
	port &= ~mask ;
	port |=  (value<<pos)&mask ;
	
	
	
}
 28e:	08 95       	ret

00000290 <dio_vidReadChannelGroup>:
u8 dio_vidReadChannelGroup(dio_portId_t port,u8 mask,u8 pos)
{
	/*	show me your code */
return (port&mask)>>pos ;
 290:	68 23       	and	r22, r24
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	cb 01       	movw	r24, r22
 296:	02 c0       	rjmp	.+4      	; 0x29c <dio_vidReadChannelGroup+0xc>
 298:	95 95       	asr	r25
 29a:	87 95       	ror	r24
 29c:	4a 95       	dec	r20
 29e:	e2 f7       	brpl	.-8      	; 0x298 <dio_vidReadChannelGroup+0x8>
	
	
	
}
 2a0:	08 95       	ret

000002a2 <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	a1 f0       	breq	.+40     	; 0x2ce <dio_vidFlipChannel+0x2c>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	28 f0       	brcs	.+10     	; 0x2b4 <dio_vidFlipChannel+0x12>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	e9 f0       	breq	.+58     	; 0x2e8 <dio_vidFlipChannel+0x46>
 2ae:	83 30       	cpi	r24, 0x03	; 3
 2b0:	a1 f5       	brne	.+104    	; 0x31a <dio_vidFlipChannel+0x78>
 2b2:	27 c0       	rjmp	.+78     	; 0x302 <dio_vidFlipChannel+0x60>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,channel);
 2b4:	2b b3       	in	r18, 0x1b	; 27
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	ac 01       	movw	r20, r24
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <dio_vidFlipChannel+0x20>
 2be:	44 0f       	add	r20, r20
 2c0:	55 1f       	adc	r21, r21
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <dio_vidFlipChannel+0x1c>
 2c6:	ba 01       	movw	r22, r20
 2c8:	62 27       	eor	r22, r18
 2ca:	6b bb       	out	0x1b, r22	; 27
		break;
 2cc:	08 95       	ret

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 2ce:	28 b3       	in	r18, 0x18	; 24
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	ac 01       	movw	r20, r24
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <dio_vidFlipChannel+0x3a>
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <dio_vidFlipChannel+0x36>
 2e0:	ba 01       	movw	r22, r20
 2e2:	62 27       	eor	r22, r18
 2e4:	68 bb       	out	0x18, r22	; 24
		break;
 2e6:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 2e8:	25 b3       	in	r18, 0x15	; 21
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	ac 01       	movw	r20, r24
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <dio_vidFlipChannel+0x54>
 2f2:	44 0f       	add	r20, r20
 2f4:	55 1f       	adc	r21, r21
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <dio_vidFlipChannel+0x50>
 2fa:	ba 01       	movw	r22, r20
 2fc:	62 27       	eor	r22, r18
 2fe:	65 bb       	out	0x15, r22	; 21
		break;
 300:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 302:	22 b3       	in	r18, 0x12	; 18
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	ac 01       	movw	r20, r24
 30a:	02 c0       	rjmp	.+4      	; 0x310 <dio_vidFlipChannel+0x6e>
 30c:	44 0f       	add	r20, r20
 30e:	55 1f       	adc	r21, r21
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <dio_vidFlipChannel+0x6a>
 314:	ba 01       	movw	r22, r20
 316:	62 27       	eor	r22, r18
 318:	62 bb       	out	0x12, r22	; 18
 31a:	08 95       	ret

0000031c <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	89 f0       	breq	.+34     	; 0x342 <dio_dioLevelReadChannel+0x26>
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	28 f0       	brcs	.+10     	; 0x32e <dio_dioLevelReadChannel+0x12>
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	b9 f0       	breq	.+46     	; 0x356 <dio_dioLevelReadChannel+0x3a>
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	49 f5       	brne	.+82     	; 0x37e <dio_dioLevelReadChannel+0x62>
 32c:	1e c0       	rjmp	.+60     	; 0x36a <dio_dioLevelReadChannel+0x4e>
	{
	 case DIO_PORTA:
		loc_pinRead = CHECK_BIT(DIO_PINA_REG, channel);
 32e:	29 b3       	in	r18, 0x19	; 25
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	c9 01       	movw	r24, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <dio_dioLevelReadChannel+0x1e>
 336:	95 95       	asr	r25
 338:	87 95       	ror	r24
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <dio_dioLevelReadChannel+0x1a>
 33e:	81 70       	andi	r24, 0x01	; 1
		break;
 340:	08 95       	ret

	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
 342:	26 b3       	in	r18, 0x16	; 22
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	c9 01       	movw	r24, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <dio_dioLevelReadChannel+0x32>
 34a:	95 95       	asr	r25
 34c:	87 95       	ror	r24
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <dio_dioLevelReadChannel+0x2e>
 352:	81 70       	andi	r24, 0x01	; 1
		break;
 354:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
 356:	23 b3       	in	r18, 0x13	; 19
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	c9 01       	movw	r24, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <dio_dioLevelReadChannel+0x46>
 35e:	95 95       	asr	r25
 360:	87 95       	ror	r24
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <dio_dioLevelReadChannel+0x42>
 366:	81 70       	andi	r24, 0x01	; 1
		break;
 368:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
 36a:	20 b3       	in	r18, 0x10	; 16
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	c9 01       	movw	r24, r18
 370:	02 c0       	rjmp	.+4      	; 0x376 <dio_dioLevelReadChannel+0x5a>
 372:	95 95       	asr	r25
 374:	87 95       	ror	r24
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <dio_dioLevelReadChannel+0x56>
 37a:	81 70       	andi	r24, 0x01	; 1
		break;
 37c:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 37e:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
		break;
    }
	return loc_pinRead;
}
 380:	08 95       	ret

00000382 <dio_vidEnablePullUp>:
* \Return value:   : None                            
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */	
	switch (port)
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	f9 f0       	breq	.+62     	; 0x3c4 <dio_vidEnablePullUp+0x42>
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	30 f0       	brcs	.+12     	; 0x396 <dio_vidEnablePullUp+0x14>
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	91 f1       	breq	.+100    	; 0x3f2 <dio_vidEnablePullUp+0x70>
 38e:	83 30       	cpi	r24, 0x03	; 3
 390:	09 f0       	breq	.+2      	; 0x394 <dio_vidEnablePullUp+0x12>
 392:	5c c0       	rjmp	.+184    	; 0x44c <dio_vidEnablePullUp+0xca>
 394:	45 c0       	rjmp	.+138    	; 0x420 <dio_vidEnablePullUp+0x9e>
	{
		case DIO_PORTA:
		if( !CHECK_BIT(DIO_DDRA_REG, channel))
 396:	8a b3       	in	r24, 0x1a	; 26
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	06 2e       	mov	r0, r22
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <dio_vidEnablePullUp+0x20>
 39e:	95 95       	asr	r25
 3a0:	87 95       	ror	r24
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <dio_vidEnablePullUp+0x1c>
 3a6:	80 fd       	sbrc	r24, 0
 3a8:	51 c0       	rjmp	.+162    	; 0x44c <dio_vidEnablePullUp+0xca>
		    SET_BIT(DIO_PORTA_REG, channel);
 3aa:	2b b3       	in	r18, 0x1b	; 27
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	ac 01       	movw	r20, r24
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <dio_vidEnablePullUp+0x36>
 3b4:	44 0f       	add	r20, r20
 3b6:	55 1f       	adc	r21, r21
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <dio_vidEnablePullUp+0x32>
 3bc:	ba 01       	movw	r22, r20
 3be:	62 2b       	or	r22, r18
 3c0:	6b bb       	out	0x1b, r22	; 27
 3c2:	08 95       	ret
		break;

		case DIO_PORTB:
		if( !CHECK_BIT(DIO_DDRB_REG, channel))
 3c4:	87 b3       	in	r24, 0x17	; 23
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	06 2e       	mov	r0, r22
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <dio_vidEnablePullUp+0x4e>
 3cc:	95 95       	asr	r25
 3ce:	87 95       	ror	r24
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <dio_vidEnablePullUp+0x4a>
 3d4:	80 fd       	sbrc	r24, 0
 3d6:	3a c0       	rjmp	.+116    	; 0x44c <dio_vidEnablePullUp+0xca>
		SET_BIT(DIO_PORTB_REG, channel);
 3d8:	28 b3       	in	r18, 0x18	; 24
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	ac 01       	movw	r20, r24
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <dio_vidEnablePullUp+0x64>
 3e2:	44 0f       	add	r20, r20
 3e4:	55 1f       	adc	r21, r21
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <dio_vidEnablePullUp+0x60>
 3ea:	ba 01       	movw	r22, r20
 3ec:	62 2b       	or	r22, r18
 3ee:	68 bb       	out	0x18, r22	; 24
 3f0:	08 95       	ret
		break;

		case DIO_PORTC:
		if( !CHECK_BIT(DIO_DDRC_REG, channel))
 3f2:	84 b3       	in	r24, 0x14	; 20
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	06 2e       	mov	r0, r22
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <dio_vidEnablePullUp+0x7c>
 3fa:	95 95       	asr	r25
 3fc:	87 95       	ror	r24
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <dio_vidEnablePullUp+0x78>
 402:	80 fd       	sbrc	r24, 0
 404:	23 c0       	rjmp	.+70     	; 0x44c <dio_vidEnablePullUp+0xca>
		   SET_BIT(DIO_PORTC_REG, channel);
 406:	25 b3       	in	r18, 0x15	; 21
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	ac 01       	movw	r20, r24
 40e:	02 c0       	rjmp	.+4      	; 0x414 <dio_vidEnablePullUp+0x92>
 410:	44 0f       	add	r20, r20
 412:	55 1f       	adc	r21, r21
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <dio_vidEnablePullUp+0x8e>
 418:	ba 01       	movw	r22, r20
 41a:	62 2b       	or	r22, r18
 41c:	65 bb       	out	0x15, r22	; 21
 41e:	08 95       	ret
		break;

		case DIO_PORTD:
		if(! CHECK_BIT(DIO_DDRD_REG, channel))
 420:	81 b3       	in	r24, 0x11	; 17
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	06 2e       	mov	r0, r22
 426:	02 c0       	rjmp	.+4      	; 0x42c <dio_vidEnablePullUp+0xaa>
 428:	95 95       	asr	r25
 42a:	87 95       	ror	r24
 42c:	0a 94       	dec	r0
 42e:	e2 f7       	brpl	.-8      	; 0x428 <dio_vidEnablePullUp+0xa6>
 430:	80 fd       	sbrc	r24, 0
 432:	0c c0       	rjmp	.+24     	; 0x44c <dio_vidEnablePullUp+0xca>
		     SET_BIT(DIO_PORTD_REG, channel);
 434:	22 b3       	in	r18, 0x12	; 18
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	ac 01       	movw	r20, r24
 43c:	02 c0       	rjmp	.+4      	; 0x442 <dio_vidEnablePullUp+0xc0>
 43e:	44 0f       	add	r20, r20
 440:	55 1f       	adc	r21, r21
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <dio_vidEnablePullUp+0xbc>
 446:	ba 01       	movw	r22, r20
 448:	62 2b       	or	r22, r18
 44a:	62 bb       	out	0x12, r22	; 18
 44c:	08 95       	ret

0000044e <lcd_Enable_pulse>:
	#endif
}

void lcd_Enable_pulse(void) 
{
	dio_vidWriteChannel(EN_PORT,EN_PIN,STD_HIGH);
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	61 e0       	ldi	r22, 0x01	; 1
 452:	41 e0       	ldi	r20, 0x01	; 1
 454:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 458:	8f e3       	ldi	r24, 0x3F	; 63
 45a:	9f e1       	ldi	r25, 0x1F	; 31
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <lcd_Enable_pulse+0xe>
 460:	00 c0       	rjmp	.+0      	; 0x462 <lcd_Enable_pulse+0x14>
 462:	00 00       	nop
	_delay_ms(2);
	dio_vidWriteChannel(EN_PORT,EN_PIN,STD_LOW);
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	61 e0       	ldi	r22, 0x01	; 1
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	
}
 46e:	08 95       	ret

00000470 <lcd_sendData>:
		dio_vidWriteChannelGroup(LCD_PORT, cmd, mask, 0);
		lcd_Enable_pulse();
	#endif
}
void lcd_sendData(u8 data)
{
 470:	cf 93       	push	r28
 472:	c8 2f       	mov	r28, r24
	dio_vidWriteChannel(RS_PORT,RS_PIN,STD_HIGH);
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	41 e0       	ldi	r20, 0x01	; 1
 47a:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	#if LCD_CHANNELS== UPPER
	u8 mask = 0xF0;
	dio_vidWriteChannelGroup(LCD_PORT, data>>4, mask, 4);
 47e:	6c 2f       	mov	r22, r28
 480:	62 95       	swap	r22
 482:	6f 70       	andi	r22, 0x0F	; 15
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	40 ef       	ldi	r20, 0xF0	; 240
 488:	24 e0       	ldi	r18, 0x04	; 4
 48a:	0e 94 47 01 	call	0x28e	; 0x28e <dio_vidWriteChannelGroup>
	lcd_Enable_pulse();
 48e:	0e 94 27 02 	call	0x44e	; 0x44e <lcd_Enable_pulse>
	dio_vidWriteChannelGroup(LCD_PORT, data, mask, 4);
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	6c 2f       	mov	r22, r28
 496:	40 ef       	ldi	r20, 0xF0	; 240
 498:	24 e0       	ldi	r18, 0x04	; 4
 49a:	0e 94 47 01 	call	0x28e	; 0x28e <dio_vidWriteChannelGroup>
	lcd_Enable_pulse();
 49e:	0e 94 27 02 	call	0x44e	; 0x44e <lcd_Enable_pulse>
	dio_vidWriteChannelGroup(LCD_PORT, data>>4, mask, 0);
	lcd_Enable_pulse();
	dio_vidWriteChannelGroup(LCD_PORT, data, mask, 0);
	lcd_Enable_pulse();
	#endif
}
 4a2:	cf 91       	pop	r28
 4a4:	08 95       	ret

000004a6 <lcd_sendCmd>:
	lcd_sendCmd(CMD_Clear_display) ;
}


void lcd_sendCmd(lcd_Cmd_Type cmd)
{
 4a6:	cf 93       	push	r28
 4a8:	c8 2f       	mov	r28, r24
	dio_vidWriteChannel(RS_PORT,RS_PIN,STD_LOW);
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	#if LCD_CHANNELS== UPPER 
		u8 mask = 0xF0;
		dio_vidWriteChannelGroup(LCD_PORT, cmd>>4, mask, 4);
 4b4:	6c 2f       	mov	r22, r28
 4b6:	62 95       	swap	r22
 4b8:	6f 70       	andi	r22, 0x0F	; 15
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	40 ef       	ldi	r20, 0xF0	; 240
 4be:	24 e0       	ldi	r18, 0x04	; 4
 4c0:	0e 94 47 01 	call	0x28e	; 0x28e <dio_vidWriteChannelGroup>
		lcd_Enable_pulse();
 4c4:	0e 94 27 02 	call	0x44e	; 0x44e <lcd_Enable_pulse>
		dio_vidWriteChannelGroup(LCD_PORT, cmd, mask, 4);
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	6c 2f       	mov	r22, r28
 4cc:	40 ef       	ldi	r20, 0xF0	; 240
 4ce:	24 e0       	ldi	r18, 0x04	; 4
 4d0:	0e 94 47 01 	call	0x28e	; 0x28e <dio_vidWriteChannelGroup>
		lcd_Enable_pulse();
 4d4:	0e 94 27 02 	call	0x44e	; 0x44e <lcd_Enable_pulse>
		dio_vidWriteChannelGroup(LCD_PORT, cmd>>4, mask, 0);
		lcd_Enable_pulse();
		dio_vidWriteChannelGroup(LCD_PORT, cmd, mask, 0);
		lcd_Enable_pulse();
	#endif
}
 4d8:	cf 91       	pop	r28
 4da:	08 95       	ret

000004dc <lcd_init>:
*******************************************************************************/

void lcd_init(void)
{
	#if LCD_CHANNELS==UPPER 
		dio_vidConfigChannel(LCD_PORT,DIO_PIN4,OUTPUT);
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	64 e0       	ldi	r22, 0x04	; 4
 4e0:	41 e0       	ldi	r20, 0x01	; 1
 4e2:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
		dio_vidConfigChannel(LCD_PORT,DIO_PIN5,OUTPUT);
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	65 e0       	ldi	r22, 0x05	; 5
 4ea:	41 e0       	ldi	r20, 0x01	; 1
 4ec:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
		dio_vidConfigChannel(LCD_PORT,DIO_PIN6,OUTPUT);
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	66 e0       	ldi	r22, 0x06	; 6
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
		dio_vidConfigChannel(LCD_PORT,DIO_PIN7,OUTPUT);
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	67 e0       	ldi	r22, 0x07	; 7
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
		 dio_vidConfigChannel(LCD_PORT,DIO_PIN1,OUTPUT);
		 dio_vidConfigChannel(LCD_PORT,DIO_PIN2,OUTPUT);
		 dio_vidConfigChannel(LCD_PORT,DIO_PIN3,OUTPUT);
	#endif
	
	dio_vidConfigChannel(RS_PORT,RS_PIN,OUTPUT);
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	41 e0       	ldi	r20, 0x01	; 1
 50a:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
	dio_vidConfigChannel(EN_PORT,EN_PIN,OUTPUT);
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	41 e0       	ldi	r20, 0x01	; 1
 514:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
 518:	8f ef       	ldi	r24, 0xFF	; 255
 51a:	96 e7       	ldi	r25, 0x76	; 118
 51c:	a1 e0       	ldi	r26, 0x01	; 1
 51e:	81 50       	subi	r24, 0x01	; 1
 520:	90 40       	sbci	r25, 0x00	; 0
 522:	a0 40       	sbci	r26, 0x00	; 0
 524:	e1 f7       	brne	.-8      	; 0x51e <lcd_init+0x42>
 526:	00 c0       	rjmp	.+0      	; 0x528 <lcd_init+0x4c>
 528:	00 00       	nop
	_delay_ms(30);
	lcd_sendCmd(CMD_4bit_mode) ;
 52a:	88 e2       	ldi	r24, 0x28	; 40
 52c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_sendCmd>
	lcd_sendCmd(CMD_Display_on) ;
 530:	8e e0       	ldi	r24, 0x0E	; 14
 532:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_sendCmd>
	lcd_sendCmd(CMD_Clear_display) ;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	0e 94 53 02 	call	0x4a6	; 0x4a6 <lcd_sendCmd>
}
 53c:	08 95       	ret

0000053e <main>:


#include <avr/io.h>

int main(void)
{
 53e:	ff cf       	rjmp	.-2      	; 0x53e <main>

00000540 <_exit>:
 540:	f8 94       	cli

00000542 <__stop_program>:
 542:	ff cf       	rjmp	.-2      	; 0x542 <__stop_program>
