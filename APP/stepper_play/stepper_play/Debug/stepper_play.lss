
stepper_play.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000008ca  0000093e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000948  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  000010a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ebf  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000405  00000000  00000000  0000201f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006c3  00000000  00000000  00002424  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00002ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  00002bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004f0  00000000  00000000  00002f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00003487  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 32 04 	call	0x864	; 0x864 <main>
  8a:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	31 f1       	breq	.+76     	; 0xe2 <dio_vidConfigChannel+0x50>
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	38 f0       	brcs	.+14     	; 0xa8 <dio_vidConfigChannel+0x16>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	09 f4       	brne	.+2      	; 0xa0 <dio_vidConfigChannel+0xe>
  9e:	3e c0       	rjmp	.+124    	; 0x11c <dio_vidConfigChannel+0x8a>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	09 f0       	breq	.+2      	; 0xa6 <dio_vidConfigChannel+0x14>
  a4:	74 c0       	rjmp	.+232    	; 0x18e <dio_vidConfigChannel+0xfc>
  a6:	57 c0       	rjmp	.+174    	; 0x156 <dio_vidConfigChannel+0xc4>
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
  a8:	41 30       	cpi	r20, 0x01	; 1
  aa:	69 f4       	brne	.+26     	; 0xc6 <dio_vidConfigChannel+0x34>
		{
			SET_BIT (DIO_DDRA_REG,channel);
  ac:	2a b3       	in	r18, 0x1a	; 26
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	ac 01       	movw	r20, r24
  b4:	02 c0       	rjmp	.+4      	; 0xba <dio_vidConfigChannel+0x28>
  b6:	44 0f       	add	r20, r20
  b8:	55 1f       	adc	r21, r21
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <dio_vidConfigChannel+0x24>
  be:	ba 01       	movw	r22, r20
  c0:	62 2b       	or	r22, r18
  c2:	6a bb       	out	0x1a, r22	; 26
  c4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
  c6:	2a b3       	in	r18, 0x1a	; 26
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	ac 01       	movw	r20, r24
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <dio_vidConfigChannel+0x42>
  d0:	44 0f       	add	r20, r20
  d2:	55 1f       	adc	r21, r21
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <dio_vidConfigChannel+0x3e>
  d8:	ba 01       	movw	r22, r20
  da:	60 95       	com	r22
  dc:	62 23       	and	r22, r18
  de:	6a bb       	out	0x1a, r22	; 26
  e0:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
  e2:	41 30       	cpi	r20, 0x01	; 1
  e4:	69 f4       	brne	.+26     	; 0x100 <dio_vidConfigChannel+0x6e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	ac 01       	movw	r20, r24
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <dio_vidConfigChannel+0x62>
  f0:	44 0f       	add	r20, r20
  f2:	55 1f       	adc	r21, r21
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <dio_vidConfigChannel+0x5e>
  f8:	ba 01       	movw	r22, r20
  fa:	62 2b       	or	r22, r18
  fc:	67 bb       	out	0x17, r22	; 23
  fe:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 100:	27 b3       	in	r18, 0x17	; 23
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	ac 01       	movw	r20, r24
 108:	02 c0       	rjmp	.+4      	; 0x10e <dio_vidConfigChannel+0x7c>
 10a:	44 0f       	add	r20, r20
 10c:	55 1f       	adc	r21, r21
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <dio_vidConfigChannel+0x78>
 112:	ba 01       	movw	r22, r20
 114:	60 95       	com	r22
 116:	62 23       	and	r22, r18
 118:	67 bb       	out	0x17, r22	; 23
 11a:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	69 f4       	brne	.+26     	; 0x13a <dio_vidConfigChannel+0xa8>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 120:	24 b3       	in	r18, 0x14	; 20
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	ac 01       	movw	r20, r24
 128:	02 c0       	rjmp	.+4      	; 0x12e <dio_vidConfigChannel+0x9c>
 12a:	44 0f       	add	r20, r20
 12c:	55 1f       	adc	r21, r21
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <dio_vidConfigChannel+0x98>
 132:	ba 01       	movw	r22, r20
 134:	62 2b       	or	r22, r18
 136:	64 bb       	out	0x14, r22	; 20
 138:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 13a:	24 b3       	in	r18, 0x14	; 20
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	ac 01       	movw	r20, r24
 142:	02 c0       	rjmp	.+4      	; 0x148 <dio_vidConfigChannel+0xb6>
 144:	44 0f       	add	r20, r20
 146:	55 1f       	adc	r21, r21
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <dio_vidConfigChannel+0xb2>
 14c:	ba 01       	movw	r22, r20
 14e:	60 95       	com	r22
 150:	62 23       	and	r22, r18
 152:	64 bb       	out	0x14, r22	; 20
 154:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	69 f4       	brne	.+26     	; 0x174 <dio_vidConfigChannel+0xe2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 15a:	21 b3       	in	r18, 0x11	; 17
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	ac 01       	movw	r20, r24
 162:	02 c0       	rjmp	.+4      	; 0x168 <dio_vidConfigChannel+0xd6>
 164:	44 0f       	add	r20, r20
 166:	55 1f       	adc	r21, r21
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <dio_vidConfigChannel+0xd2>
 16c:	ba 01       	movw	r22, r20
 16e:	62 2b       	or	r22, r18
 170:	61 bb       	out	0x11, r22	; 17
 172:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 174:	21 b3       	in	r18, 0x11	; 17
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	ac 01       	movw	r20, r24
 17c:	02 c0       	rjmp	.+4      	; 0x182 <dio_vidConfigChannel+0xf0>
 17e:	44 0f       	add	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <dio_vidConfigChannel+0xec>
 186:	ba 01       	movw	r22, r20
 188:	60 95       	com	r22
 18a:	62 23       	and	r22, r18
 18c:	61 bb       	out	0x11, r22	; 17
 18e:	08 95       	ret

00000190 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	31 f1       	breq	.+76     	; 0x1e0 <dio_vidWriteChannel+0x50>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	38 f0       	brcs	.+14     	; 0x1a6 <dio_vidWriteChannel+0x16>
 198:	82 30       	cpi	r24, 0x02	; 2
 19a:	09 f4       	brne	.+2      	; 0x19e <dio_vidWriteChannel+0xe>
 19c:	3e c0       	rjmp	.+124    	; 0x21a <dio_vidWriteChannel+0x8a>
 19e:	83 30       	cpi	r24, 0x03	; 3
 1a0:	09 f0       	breq	.+2      	; 0x1a4 <dio_vidWriteChannel+0x14>
 1a2:	74 c0       	rjmp	.+232    	; 0x28c <dio_vidWriteChannel+0xfc>
 1a4:	57 c0       	rjmp	.+174    	; 0x254 <dio_vidWriteChannel+0xc4>
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 1a6:	44 23       	and	r20, r20
 1a8:	71 f4       	brne	.+28     	; 0x1c6 <dio_vidWriteChannel+0x36>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 1aa:	2b b3       	in	r18, 0x1b	; 27
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	ac 01       	movw	r20, r24
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <dio_vidWriteChannel+0x28>
 1b4:	44 0f       	add	r20, r20
 1b6:	55 1f       	adc	r21, r21
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <dio_vidWriteChannel+0x24>
 1bc:	ba 01       	movw	r22, r20
 1be:	60 95       	com	r22
 1c0:	62 23       	and	r22, r18
 1c2:	6b bb       	out	0x1b, r22	; 27
 1c4:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 1c6:	2b b3       	in	r18, 0x1b	; 27
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	ac 01       	movw	r20, r24
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <dio_vidWriteChannel+0x44>
 1d0:	44 0f       	add	r20, r20
 1d2:	55 1f       	adc	r21, r21
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <dio_vidWriteChannel+0x40>
 1d8:	ba 01       	movw	r22, r20
 1da:	62 2b       	or	r22, r18
 1dc:	6b bb       	out	0x1b, r22	; 27
 1de:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 1e0:	44 23       	and	r20, r20
 1e2:	71 f4       	brne	.+28     	; 0x200 <dio_vidWriteChannel+0x70>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 1e4:	28 b3       	in	r18, 0x18	; 24
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	ac 01       	movw	r20, r24
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <dio_vidWriteChannel+0x62>
 1ee:	44 0f       	add	r20, r20
 1f0:	55 1f       	adc	r21, r21
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <dio_vidWriteChannel+0x5e>
 1f6:	ba 01       	movw	r22, r20
 1f8:	60 95       	com	r22
 1fa:	62 23       	and	r22, r18
 1fc:	68 bb       	out	0x18, r22	; 24
 1fe:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 200:	28 b3       	in	r18, 0x18	; 24
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	ac 01       	movw	r20, r24
 208:	02 c0       	rjmp	.+4      	; 0x20e <dio_vidWriteChannel+0x7e>
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <dio_vidWriteChannel+0x7a>
 212:	ba 01       	movw	r22, r20
 214:	62 2b       	or	r22, r18
 216:	68 bb       	out	0x18, r22	; 24
 218:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 21a:	44 23       	and	r20, r20
 21c:	71 f4       	brne	.+28     	; 0x23a <dio_vidWriteChannel+0xaa>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 21e:	25 b3       	in	r18, 0x15	; 21
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	ac 01       	movw	r20, r24
 226:	02 c0       	rjmp	.+4      	; 0x22c <dio_vidWriteChannel+0x9c>
 228:	44 0f       	add	r20, r20
 22a:	55 1f       	adc	r21, r21
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <dio_vidWriteChannel+0x98>
 230:	ba 01       	movw	r22, r20
 232:	60 95       	com	r22
 234:	62 23       	and	r22, r18
 236:	65 bb       	out	0x15, r22	; 21
 238:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 23a:	25 b3       	in	r18, 0x15	; 21
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	ac 01       	movw	r20, r24
 242:	02 c0       	rjmp	.+4      	; 0x248 <dio_vidWriteChannel+0xb8>
 244:	44 0f       	add	r20, r20
 246:	55 1f       	adc	r21, r21
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <dio_vidWriteChannel+0xb4>
 24c:	ba 01       	movw	r22, r20
 24e:	62 2b       	or	r22, r18
 250:	65 bb       	out	0x15, r22	; 21
 252:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 254:	44 23       	and	r20, r20
 256:	71 f4       	brne	.+28     	; 0x274 <dio_vidWriteChannel+0xe4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 258:	22 b3       	in	r18, 0x12	; 18
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	ac 01       	movw	r20, r24
 260:	02 c0       	rjmp	.+4      	; 0x266 <dio_vidWriteChannel+0xd6>
 262:	44 0f       	add	r20, r20
 264:	55 1f       	adc	r21, r21
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <dio_vidWriteChannel+0xd2>
 26a:	ba 01       	movw	r22, r20
 26c:	60 95       	com	r22
 26e:	62 23       	and	r22, r18
 270:	62 bb       	out	0x12, r22	; 18
 272:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 274:	22 b3       	in	r18, 0x12	; 18
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	ac 01       	movw	r20, r24
 27c:	02 c0       	rjmp	.+4      	; 0x282 <dio_vidWriteChannel+0xf2>
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <dio_vidWriteChannel+0xee>
 286:	ba 01       	movw	r22, r20
 288:	62 2b       	or	r22, r18
 28a:	62 bb       	out	0x12, r22	; 18
 28c:	08 95       	ret

0000028e <dio_vidWriteChannelGroup>:
	port &= ~mask ;
	port |=  (value<<pos)&mask ;
	
	
	
}
 28e:	08 95       	ret

00000290 <dio_vidReadChannelGroup>:
u8 dio_vidReadChannelGroup(dio_portId_t port,u8 mask,u8 pos)
{
	/*	show me your code */
return (port&mask)>>pos ;
 290:	68 23       	and	r22, r24
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	cb 01       	movw	r24, r22
 296:	02 c0       	rjmp	.+4      	; 0x29c <dio_vidReadChannelGroup+0xc>
 298:	95 95       	asr	r25
 29a:	87 95       	ror	r24
 29c:	4a 95       	dec	r20
 29e:	e2 f7       	brpl	.-8      	; 0x298 <dio_vidReadChannelGroup+0x8>
	
	
	
}
 2a0:	08 95       	ret

000002a2 <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	a1 f0       	breq	.+40     	; 0x2ce <dio_vidFlipChannel+0x2c>
 2a6:	81 30       	cpi	r24, 0x01	; 1
 2a8:	28 f0       	brcs	.+10     	; 0x2b4 <dio_vidFlipChannel+0x12>
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	e9 f0       	breq	.+58     	; 0x2e8 <dio_vidFlipChannel+0x46>
 2ae:	83 30       	cpi	r24, 0x03	; 3
 2b0:	a1 f5       	brne	.+104    	; 0x31a <dio_vidFlipChannel+0x78>
 2b2:	27 c0       	rjmp	.+78     	; 0x302 <dio_vidFlipChannel+0x60>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,channel);
 2b4:	2b b3       	in	r18, 0x1b	; 27
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	ac 01       	movw	r20, r24
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <dio_vidFlipChannel+0x20>
 2be:	44 0f       	add	r20, r20
 2c0:	55 1f       	adc	r21, r21
 2c2:	6a 95       	dec	r22
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <dio_vidFlipChannel+0x1c>
 2c6:	ba 01       	movw	r22, r20
 2c8:	62 27       	eor	r22, r18
 2ca:	6b bb       	out	0x1b, r22	; 27
		break;
 2cc:	08 95       	ret

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 2ce:	28 b3       	in	r18, 0x18	; 24
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	ac 01       	movw	r20, r24
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <dio_vidFlipChannel+0x3a>
 2d8:	44 0f       	add	r20, r20
 2da:	55 1f       	adc	r21, r21
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <dio_vidFlipChannel+0x36>
 2e0:	ba 01       	movw	r22, r20
 2e2:	62 27       	eor	r22, r18
 2e4:	68 bb       	out	0x18, r22	; 24
		break;
 2e6:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 2e8:	25 b3       	in	r18, 0x15	; 21
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	ac 01       	movw	r20, r24
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <dio_vidFlipChannel+0x54>
 2f2:	44 0f       	add	r20, r20
 2f4:	55 1f       	adc	r21, r21
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <dio_vidFlipChannel+0x50>
 2fa:	ba 01       	movw	r22, r20
 2fc:	62 27       	eor	r22, r18
 2fe:	65 bb       	out	0x15, r22	; 21
		break;
 300:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 302:	22 b3       	in	r18, 0x12	; 18
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	ac 01       	movw	r20, r24
 30a:	02 c0       	rjmp	.+4      	; 0x310 <dio_vidFlipChannel+0x6e>
 30c:	44 0f       	add	r20, r20
 30e:	55 1f       	adc	r21, r21
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <dio_vidFlipChannel+0x6a>
 314:	ba 01       	movw	r22, r20
 316:	62 27       	eor	r22, r18
 318:	62 bb       	out	0x12, r22	; 18
 31a:	08 95       	ret

0000031c <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 31c:	81 30       	cpi	r24, 0x01	; 1
 31e:	89 f0       	breq	.+34     	; 0x342 <dio_dioLevelReadChannel+0x26>
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	28 f0       	brcs	.+10     	; 0x32e <dio_dioLevelReadChannel+0x12>
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	b9 f0       	breq	.+46     	; 0x356 <dio_dioLevelReadChannel+0x3a>
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	49 f5       	brne	.+82     	; 0x37e <dio_dioLevelReadChannel+0x62>
 32c:	1e c0       	rjmp	.+60     	; 0x36a <dio_dioLevelReadChannel+0x4e>
	{
	 case DIO_PORTA:
		loc_pinRead = CHECK_BIT(DIO_PINA_REG, channel);
 32e:	29 b3       	in	r18, 0x19	; 25
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	c9 01       	movw	r24, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <dio_dioLevelReadChannel+0x1e>
 336:	95 95       	asr	r25
 338:	87 95       	ror	r24
 33a:	6a 95       	dec	r22
 33c:	e2 f7       	brpl	.-8      	; 0x336 <dio_dioLevelReadChannel+0x1a>
 33e:	81 70       	andi	r24, 0x01	; 1
		break;
 340:	08 95       	ret

	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
 342:	26 b3       	in	r18, 0x16	; 22
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	c9 01       	movw	r24, r18
 348:	02 c0       	rjmp	.+4      	; 0x34e <dio_dioLevelReadChannel+0x32>
 34a:	95 95       	asr	r25
 34c:	87 95       	ror	r24
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <dio_dioLevelReadChannel+0x2e>
 352:	81 70       	andi	r24, 0x01	; 1
		break;
 354:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
 356:	23 b3       	in	r18, 0x13	; 19
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	c9 01       	movw	r24, r18
 35c:	02 c0       	rjmp	.+4      	; 0x362 <dio_dioLevelReadChannel+0x46>
 35e:	95 95       	asr	r25
 360:	87 95       	ror	r24
 362:	6a 95       	dec	r22
 364:	e2 f7       	brpl	.-8      	; 0x35e <dio_dioLevelReadChannel+0x42>
 366:	81 70       	andi	r24, 0x01	; 1
		break;
 368:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
 36a:	20 b3       	in	r18, 0x10	; 16
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	c9 01       	movw	r24, r18
 370:	02 c0       	rjmp	.+4      	; 0x376 <dio_dioLevelReadChannel+0x5a>
 372:	95 95       	asr	r25
 374:	87 95       	ror	r24
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <dio_dioLevelReadChannel+0x56>
 37a:	81 70       	andi	r24, 0x01	; 1
		break;
 37c:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 37e:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
		break;
    }
	return loc_pinRead;
}
 380:	08 95       	ret

00000382 <dio_vidEnablePullUp>:
* \Return value:   : None                            
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */	
	switch (port)
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	f9 f0       	breq	.+62     	; 0x3c4 <dio_vidEnablePullUp+0x42>
 386:	81 30       	cpi	r24, 0x01	; 1
 388:	30 f0       	brcs	.+12     	; 0x396 <dio_vidEnablePullUp+0x14>
 38a:	82 30       	cpi	r24, 0x02	; 2
 38c:	91 f1       	breq	.+100    	; 0x3f2 <dio_vidEnablePullUp+0x70>
 38e:	83 30       	cpi	r24, 0x03	; 3
 390:	09 f0       	breq	.+2      	; 0x394 <dio_vidEnablePullUp+0x12>
 392:	5c c0       	rjmp	.+184    	; 0x44c <dio_vidEnablePullUp+0xca>
 394:	45 c0       	rjmp	.+138    	; 0x420 <dio_vidEnablePullUp+0x9e>
	{
		case DIO_PORTA:
		if( !CHECK_BIT(DIO_DDRA_REG, channel))
 396:	8a b3       	in	r24, 0x1a	; 26
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	06 2e       	mov	r0, r22
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <dio_vidEnablePullUp+0x20>
 39e:	95 95       	asr	r25
 3a0:	87 95       	ror	r24
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <dio_vidEnablePullUp+0x1c>
 3a6:	80 fd       	sbrc	r24, 0
 3a8:	51 c0       	rjmp	.+162    	; 0x44c <dio_vidEnablePullUp+0xca>
		    SET_BIT(DIO_PORTA_REG, channel);
 3aa:	2b b3       	in	r18, 0x1b	; 27
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	ac 01       	movw	r20, r24
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <dio_vidEnablePullUp+0x36>
 3b4:	44 0f       	add	r20, r20
 3b6:	55 1f       	adc	r21, r21
 3b8:	6a 95       	dec	r22
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <dio_vidEnablePullUp+0x32>
 3bc:	ba 01       	movw	r22, r20
 3be:	62 2b       	or	r22, r18
 3c0:	6b bb       	out	0x1b, r22	; 27
 3c2:	08 95       	ret
		break;

		case DIO_PORTB:
		if( !CHECK_BIT(DIO_DDRB_REG, channel))
 3c4:	87 b3       	in	r24, 0x17	; 23
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	06 2e       	mov	r0, r22
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <dio_vidEnablePullUp+0x4e>
 3cc:	95 95       	asr	r25
 3ce:	87 95       	ror	r24
 3d0:	0a 94       	dec	r0
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <dio_vidEnablePullUp+0x4a>
 3d4:	80 fd       	sbrc	r24, 0
 3d6:	3a c0       	rjmp	.+116    	; 0x44c <dio_vidEnablePullUp+0xca>
		SET_BIT(DIO_PORTB_REG, channel);
 3d8:	28 b3       	in	r18, 0x18	; 24
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	ac 01       	movw	r20, r24
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <dio_vidEnablePullUp+0x64>
 3e2:	44 0f       	add	r20, r20
 3e4:	55 1f       	adc	r21, r21
 3e6:	6a 95       	dec	r22
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <dio_vidEnablePullUp+0x60>
 3ea:	ba 01       	movw	r22, r20
 3ec:	62 2b       	or	r22, r18
 3ee:	68 bb       	out	0x18, r22	; 24
 3f0:	08 95       	ret
		break;

		case DIO_PORTC:
		if( !CHECK_BIT(DIO_DDRC_REG, channel))
 3f2:	84 b3       	in	r24, 0x14	; 20
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	06 2e       	mov	r0, r22
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <dio_vidEnablePullUp+0x7c>
 3fa:	95 95       	asr	r25
 3fc:	87 95       	ror	r24
 3fe:	0a 94       	dec	r0
 400:	e2 f7       	brpl	.-8      	; 0x3fa <dio_vidEnablePullUp+0x78>
 402:	80 fd       	sbrc	r24, 0
 404:	23 c0       	rjmp	.+70     	; 0x44c <dio_vidEnablePullUp+0xca>
		   SET_BIT(DIO_PORTC_REG, channel);
 406:	25 b3       	in	r18, 0x15	; 21
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	ac 01       	movw	r20, r24
 40e:	02 c0       	rjmp	.+4      	; 0x414 <dio_vidEnablePullUp+0x92>
 410:	44 0f       	add	r20, r20
 412:	55 1f       	adc	r21, r21
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <dio_vidEnablePullUp+0x8e>
 418:	ba 01       	movw	r22, r20
 41a:	62 2b       	or	r22, r18
 41c:	65 bb       	out	0x15, r22	; 21
 41e:	08 95       	ret
		break;

		case DIO_PORTD:
		if(! CHECK_BIT(DIO_DDRD_REG, channel))
 420:	81 b3       	in	r24, 0x11	; 17
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	06 2e       	mov	r0, r22
 426:	02 c0       	rjmp	.+4      	; 0x42c <dio_vidEnablePullUp+0xaa>
 428:	95 95       	asr	r25
 42a:	87 95       	ror	r24
 42c:	0a 94       	dec	r0
 42e:	e2 f7       	brpl	.-8      	; 0x428 <dio_vidEnablePullUp+0xa6>
 430:	80 fd       	sbrc	r24, 0
 432:	0c c0       	rjmp	.+24     	; 0x44c <dio_vidEnablePullUp+0xca>
		     SET_BIT(DIO_PORTD_REG, channel);
 434:	22 b3       	in	r18, 0x12	; 18
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	ac 01       	movw	r20, r24
 43c:	02 c0       	rjmp	.+4      	; 0x442 <dio_vidEnablePullUp+0xc0>
 43e:	44 0f       	add	r20, r20
 440:	55 1f       	adc	r21, r21
 442:	6a 95       	dec	r22
 444:	e2 f7       	brpl	.-8      	; 0x43e <dio_vidEnablePullUp+0xbc>
 446:	ba 01       	movw	r22, r20
 448:	62 2b       	or	r22, r18
 44a:	62 bb       	out	0x12, r22	; 18
 44c:	08 95       	ret

0000044e <StepperMotor_voidinit>:
void StepperMotor_voidinit(void) 
{
	u8 u8motor_num = 0 ;
	for (u8motor_num=0 ;u8motor_num<NUM__OF_STEPPERS ;u8motor_num++)
	{
		dio_vidConfigChannel(ArrayOfMotor[u8motor_num].port_of_pin1, ArrayOfMotor[u8motor_num].pin1 , OUTPUT);
 44e:	80 91 60 00 	lds	r24, 0x0060
 452:	60 91 61 00 	lds	r22, 0x0061
 456:	41 e0       	ldi	r20, 0x01	; 1
 458:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
		dio_vidConfigChannel(ArrayOfMotor[u8motor_num].port_of_pin2, ArrayOfMotor[u8motor_num].pin2 , OUTPUT);
 45c:	80 91 62 00 	lds	r24, 0x0062
 460:	60 91 63 00 	lds	r22, 0x0063
 464:	41 e0       	ldi	r20, 0x01	; 1
 466:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
		dio_vidConfigChannel(ArrayOfMotor[u8motor_num].port_of_pin3, ArrayOfMotor[u8motor_num].pin3 , OUTPUT);
 46a:	80 91 64 00 	lds	r24, 0x0064
 46e:	60 91 65 00 	lds	r22, 0x0065
 472:	41 e0       	ldi	r20, 0x01	; 1
 474:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
		dio_vidConfigChannel(ArrayOfMotor[u8motor_num].port_of_pin4, ArrayOfMotor[u8motor_num].pin4 , OUTPUT);
 478:	80 91 66 00 	lds	r24, 0x0066
 47c:	60 91 67 00 	lds	r22, 0x0067
 480:	41 e0       	ldi	r20, 0x01	; 1
 482:	0e 94 49 00 	call	0x92	; 0x92 <dio_vidConfigChannel>
	}
}
 486:	08 95       	ret

00000488 <StepperMotor_viodrotateCW>:
/****************************************************************/
/* Pre_condition  :  this function must be used after stepper  */
/*     				 initialized								*/
/****************************************************************/
void StepperMotor_viodrotateCW(u8 motor_num)
{
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin1 ,ArrayOfMotor[motor_num].pin1,STD_HIGH);
 48c:	c8 2f       	mov	r28, r24
 48e:	d0 e0       	ldi	r29, 0x00	; 0
 490:	cc 0f       	add	r28, r28
 492:	dd 1f       	adc	r29, r29
 494:	cc 0f       	add	r28, r28
 496:	dd 1f       	adc	r29, r29
 498:	cc 0f       	add	r28, r28
 49a:	dd 1f       	adc	r29, r29
 49c:	c0 5a       	subi	r28, 0xA0	; 160
 49e:	df 4f       	sbci	r29, 0xFF	; 255
 4a0:	88 81       	ld	r24, Y
 4a2:	69 81       	ldd	r22, Y+1	; 0x01
 4a4:	41 e0       	ldi	r20, 0x01	; 1
 4a6:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin2 ,ArrayOfMotor[motor_num].pin2,STD_LOW);
 4aa:	8a 81       	ldd	r24, Y+2	; 0x02
 4ac:	6b 81       	ldd	r22, Y+3	; 0x03
 4ae:	40 e0       	ldi	r20, 0x00	; 0
 4b0:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin3 ,ArrayOfMotor[motor_num].pin3,STD_LOW);               // step1 
 4b4:	8c 81       	ldd	r24, Y+4	; 0x04
 4b6:	6d 81       	ldd	r22, Y+5	; 0x05
 4b8:	40 e0       	ldi	r20, 0x00	; 0
 4ba:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin4 ,ArrayOfMotor[motor_num].pin4,STD_HIGH);
 4be:	8e 81       	ldd	r24, Y+6	; 0x06
 4c0:	6f 81       	ldd	r22, Y+7	; 0x07
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4c8:	8f e7       	ldi	r24, 0x7F	; 127
 4ca:	98 e3       	ldi	r25, 0x38	; 56
 4cc:	a1 e0       	ldi	r26, 0x01	; 1
 4ce:	81 50       	subi	r24, 0x01	; 1
 4d0:	90 40       	sbci	r25, 0x00	; 0
 4d2:	a0 40       	sbci	r26, 0x00	; 0
 4d4:	e1 f7       	brne	.-8      	; 0x4ce <StepperMotor_viodrotateCW+0x46>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <StepperMotor_viodrotateCW+0x50>
 4d8:	00 00       	nop
	_delay_ms(50);
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin1 ,ArrayOfMotor[motor_num].pin1,STD_LOW);
 4da:	88 81       	ld	r24, Y
 4dc:	69 81       	ldd	r22, Y+1	; 0x01
 4de:	40 e0       	ldi	r20, 0x00	; 0
 4e0:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin2 ,ArrayOfMotor[motor_num].pin2,STD_LOW);
 4e4:	8a 81       	ldd	r24, Y+2	; 0x02
 4e6:	6b 81       	ldd	r22, Y+3	; 0x03
 4e8:	40 e0       	ldi	r20, 0x00	; 0
 4ea:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin3 ,ArrayOfMotor[motor_num].pin3,STD_LOW);                   //step2
 4ee:	8c 81       	ldd	r24, Y+4	; 0x04
 4f0:	6d 81       	ldd	r22, Y+5	; 0x05
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin4 ,ArrayOfMotor[motor_num].pin4,STD_HIGH);
 4f8:	8e 81       	ldd	r24, Y+6	; 0x06
 4fa:	6f 81       	ldd	r22, Y+7	; 0x07
 4fc:	41 e0       	ldi	r20, 0x01	; 1
 4fe:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
 502:	8f e7       	ldi	r24, 0x7F	; 127
 504:	98 e3       	ldi	r25, 0x38	; 56
 506:	a1 e0       	ldi	r26, 0x01	; 1
 508:	81 50       	subi	r24, 0x01	; 1
 50a:	90 40       	sbci	r25, 0x00	; 0
 50c:	a0 40       	sbci	r26, 0x00	; 0
 50e:	e1 f7       	brne	.-8      	; 0x508 <StepperMotor_viodrotateCW+0x80>
 510:	00 c0       	rjmp	.+0      	; 0x512 <StepperMotor_viodrotateCW+0x8a>
 512:	00 00       	nop
	_delay_ms(50);
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin1 ,ArrayOfMotor[motor_num].pin1,STD_LOW);
 514:	88 81       	ld	r24, Y
 516:	69 81       	ldd	r22, Y+1	; 0x01
 518:	40 e0       	ldi	r20, 0x00	; 0
 51a:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin2 ,ArrayOfMotor[motor_num].pin2,STD_LOW);                
 51e:	8a 81       	ldd	r24, Y+2	; 0x02
 520:	6b 81       	ldd	r22, Y+3	; 0x03
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin3 ,ArrayOfMotor[motor_num].pin3,STD_HIGH);                //step 3 
 528:	8c 81       	ldd	r24, Y+4	; 0x04
 52a:	6d 81       	ldd	r22, Y+5	; 0x05
 52c:	41 e0       	ldi	r20, 0x01	; 1
 52e:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin4 ,ArrayOfMotor[motor_num].pin4,STD_HIGH);
 532:	8e 81       	ldd	r24, Y+6	; 0x06
 534:	6f 81       	ldd	r22, Y+7	; 0x07
 536:	41 e0       	ldi	r20, 0x01	; 1
 538:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
 53c:	8f e7       	ldi	r24, 0x7F	; 127
 53e:	98 e3       	ldi	r25, 0x38	; 56
 540:	a1 e0       	ldi	r26, 0x01	; 1
 542:	81 50       	subi	r24, 0x01	; 1
 544:	90 40       	sbci	r25, 0x00	; 0
 546:	a0 40       	sbci	r26, 0x00	; 0
 548:	e1 f7       	brne	.-8      	; 0x542 <StepperMotor_viodrotateCW+0xba>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <StepperMotor_viodrotateCW+0xc4>
 54c:	00 00       	nop
	_delay_ms(50);
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin1 ,ArrayOfMotor[motor_num].pin1,STD_LOW);
 54e:	88 81       	ld	r24, Y
 550:	69 81       	ldd	r22, Y+1	; 0x01
 552:	40 e0       	ldi	r20, 0x00	; 0
 554:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin2 ,ArrayOfMotor[motor_num].pin2,STD_LOW);              //step4
 558:	8a 81       	ldd	r24, Y+2	; 0x02
 55a:	6b 81       	ldd	r22, Y+3	; 0x03
 55c:	40 e0       	ldi	r20, 0x00	; 0
 55e:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin3 ,ArrayOfMotor[motor_num].pin3,STD_HIGH);
 562:	8c 81       	ldd	r24, Y+4	; 0x04
 564:	6d 81       	ldd	r22, Y+5	; 0x05
 566:	41 e0       	ldi	r20, 0x01	; 1
 568:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin4 ,ArrayOfMotor[motor_num].pin4,STD_LOW);
 56c:	8e 81       	ldd	r24, Y+6	; 0x06
 56e:	6f 81       	ldd	r22, Y+7	; 0x07
 570:	40 e0       	ldi	r20, 0x00	; 0
 572:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
 576:	8f e7       	ldi	r24, 0x7F	; 127
 578:	98 e3       	ldi	r25, 0x38	; 56
 57a:	a1 e0       	ldi	r26, 0x01	; 1
 57c:	81 50       	subi	r24, 0x01	; 1
 57e:	90 40       	sbci	r25, 0x00	; 0
 580:	a0 40       	sbci	r26, 0x00	; 0
 582:	e1 f7       	brne	.-8      	; 0x57c <StepperMotor_viodrotateCW+0xf4>
 584:	00 c0       	rjmp	.+0      	; 0x586 <StepperMotor_viodrotateCW+0xfe>
 586:	00 00       	nop
	_delay_ms(50);
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin1 ,ArrayOfMotor[motor_num].pin1,STD_LOW);
 588:	88 81       	ld	r24, Y
 58a:	69 81       	ldd	r22, Y+1	; 0x01
 58c:	40 e0       	ldi	r20, 0x00	; 0
 58e:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin2 ,ArrayOfMotor[motor_num].pin2,STD_HIGH);
 592:	8a 81       	ldd	r24, Y+2	; 0x02
 594:	6b 81       	ldd	r22, Y+3	; 0x03
 596:	41 e0       	ldi	r20, 0x01	; 1
 598:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin3 ,ArrayOfMotor[motor_num].pin3,STD_HIGH);                //step5
 59c:	8c 81       	ldd	r24, Y+4	; 0x04
 59e:	6d 81       	ldd	r22, Y+5	; 0x05
 5a0:	41 e0       	ldi	r20, 0x01	; 1
 5a2:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin4 ,ArrayOfMotor[motor_num].pin4,STD_LOW);
 5a6:	8e 81       	ldd	r24, Y+6	; 0x06
 5a8:	6f 81       	ldd	r22, Y+7	; 0x07
 5aa:	40 e0       	ldi	r20, 0x00	; 0
 5ac:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
 5b0:	8f e7       	ldi	r24, 0x7F	; 127
 5b2:	98 e3       	ldi	r25, 0x38	; 56
 5b4:	a1 e0       	ldi	r26, 0x01	; 1
 5b6:	81 50       	subi	r24, 0x01	; 1
 5b8:	90 40       	sbci	r25, 0x00	; 0
 5ba:	a0 40       	sbci	r26, 0x00	; 0
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <StepperMotor_viodrotateCW+0x12e>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <StepperMotor_viodrotateCW+0x138>
 5c0:	00 00       	nop
	_delay_ms(50);
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin1 ,ArrayOfMotor[motor_num].pin1,STD_LOW);
 5c2:	88 81       	ld	r24, Y
 5c4:	69 81       	ldd	r22, Y+1	; 0x01
 5c6:	40 e0       	ldi	r20, 0x00	; 0
 5c8:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin2 ,ArrayOfMotor[motor_num].pin2,STD_HIGH);               //step6
 5cc:	8a 81       	ldd	r24, Y+2	; 0x02
 5ce:	6b 81       	ldd	r22, Y+3	; 0x03
 5d0:	41 e0       	ldi	r20, 0x01	; 1
 5d2:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin3 ,ArrayOfMotor[motor_num].pin3,STD_LOW);
 5d6:	8c 81       	ldd	r24, Y+4	; 0x04
 5d8:	6d 81       	ldd	r22, Y+5	; 0x05
 5da:	40 e0       	ldi	r20, 0x00	; 0
 5dc:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin4 ,ArrayOfMotor[motor_num].pin4,STD_LOW);
 5e0:	8e 81       	ldd	r24, Y+6	; 0x06
 5e2:	6f 81       	ldd	r22, Y+7	; 0x07
 5e4:	40 e0       	ldi	r20, 0x00	; 0
 5e6:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
 5ea:	8f e7       	ldi	r24, 0x7F	; 127
 5ec:	98 e3       	ldi	r25, 0x38	; 56
 5ee:	a1 e0       	ldi	r26, 0x01	; 1
 5f0:	81 50       	subi	r24, 0x01	; 1
 5f2:	90 40       	sbci	r25, 0x00	; 0
 5f4:	a0 40       	sbci	r26, 0x00	; 0
 5f6:	e1 f7       	brne	.-8      	; 0x5f0 <StepperMotor_viodrotateCW+0x168>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <StepperMotor_viodrotateCW+0x172>
 5fa:	00 00       	nop
	_delay_ms(50);
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin1 ,ArrayOfMotor[motor_num].pin1,STD_HIGH);
 5fc:	88 81       	ld	r24, Y
 5fe:	69 81       	ldd	r22, Y+1	; 0x01
 600:	41 e0       	ldi	r20, 0x01	; 1
 602:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin2 ,ArrayOfMotor[motor_num].pin2,STD_HIGH);
 606:	8a 81       	ldd	r24, Y+2	; 0x02
 608:	6b 81       	ldd	r22, Y+3	; 0x03
 60a:	41 e0       	ldi	r20, 0x01	; 1
 60c:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin3 ,ArrayOfMotor[motor_num].pin3,STD_LOW);               //step7
 610:	8c 81       	ldd	r24, Y+4	; 0x04
 612:	6d 81       	ldd	r22, Y+5	; 0x05
 614:	40 e0       	ldi	r20, 0x00	; 0
 616:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin4 ,ArrayOfMotor[motor_num].pin4,STD_LOW);
 61a:	8e 81       	ldd	r24, Y+6	; 0x06
 61c:	6f 81       	ldd	r22, Y+7	; 0x07
 61e:	40 e0       	ldi	r20, 0x00	; 0
 620:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
 624:	8f e7       	ldi	r24, 0x7F	; 127
 626:	98 e3       	ldi	r25, 0x38	; 56
 628:	a1 e0       	ldi	r26, 0x01	; 1
 62a:	81 50       	subi	r24, 0x01	; 1
 62c:	90 40       	sbci	r25, 0x00	; 0
 62e:	a0 40       	sbci	r26, 0x00	; 0
 630:	e1 f7       	brne	.-8      	; 0x62a <StepperMotor_viodrotateCW+0x1a2>
 632:	00 c0       	rjmp	.+0      	; 0x634 <StepperMotor_viodrotateCW+0x1ac>
 634:	00 00       	nop
	_delay_ms(50);
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin1 ,ArrayOfMotor[motor_num].pin1,STD_HIGH);
 636:	88 81       	ld	r24, Y
 638:	69 81       	ldd	r22, Y+1	; 0x01
 63a:	41 e0       	ldi	r20, 0x01	; 1
 63c:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin2 ,ArrayOfMotor[motor_num].pin2,STD_LOW);
 640:	8a 81       	ldd	r24, Y+2	; 0x02
 642:	6b 81       	ldd	r22, Y+3	; 0x03
 644:	40 e0       	ldi	r20, 0x00	; 0
 646:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin3 ,ArrayOfMotor[motor_num].pin3,STD_LOW);                 //step8
 64a:	8c 81       	ldd	r24, Y+4	; 0x04
 64c:	6d 81       	ldd	r22, Y+5	; 0x05
 64e:	40 e0       	ldi	r20, 0x00	; 0
 650:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin4 ,ArrayOfMotor[motor_num].pin4,STD_LOW);
 654:	8e 81       	ldd	r24, Y+6	; 0x06
 656:	6f 81       	ldd	r22, Y+7	; 0x07
 658:	40 e0       	ldi	r20, 0x00	; 0
 65a:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
 65e:	8f e7       	ldi	r24, 0x7F	; 127
 660:	98 e3       	ldi	r25, 0x38	; 56
 662:	a1 e0       	ldi	r26, 0x01	; 1
 664:	81 50       	subi	r24, 0x01	; 1
 666:	90 40       	sbci	r25, 0x00	; 0
 668:	a0 40       	sbci	r26, 0x00	; 0
 66a:	e1 f7       	brne	.-8      	; 0x664 <StepperMotor_viodrotateCW+0x1dc>
 66c:	00 c0       	rjmp	.+0      	; 0x66e <StepperMotor_viodrotateCW+0x1e6>
 66e:	00 00       	nop
	_delay_ms(50);
}
 670:	df 91       	pop	r29
 672:	cf 91       	pop	r28
 674:	08 95       	ret

00000676 <StepperMotor_viodrotateACW>:
/****************************************************************/
/* Pre_condition  :  this function must be used after stepper  */
/*     				 initialized								*/
/****************************************************************/
void StepperMotor_viodrotateACW(u8 motor_num)
{
 676:	cf 93       	push	r28
 678:	df 93       	push	r29
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin1 ,ArrayOfMotor[motor_num].pin1,STD_HIGH);
 67a:	c8 2f       	mov	r28, r24
 67c:	d0 e0       	ldi	r29, 0x00	; 0
 67e:	cc 0f       	add	r28, r28
 680:	dd 1f       	adc	r29, r29
 682:	cc 0f       	add	r28, r28
 684:	dd 1f       	adc	r29, r29
 686:	cc 0f       	add	r28, r28
 688:	dd 1f       	adc	r29, r29
 68a:	c0 5a       	subi	r28, 0xA0	; 160
 68c:	df 4f       	sbci	r29, 0xFF	; 255
 68e:	88 81       	ld	r24, Y
 690:	69 81       	ldd	r22, Y+1	; 0x01
 692:	41 e0       	ldi	r20, 0x01	; 1
 694:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin2 ,ArrayOfMotor[motor_num].pin2,STD_LOW);
 698:	8a 81       	ldd	r24, Y+2	; 0x02
 69a:	6b 81       	ldd	r22, Y+3	; 0x03
 69c:	40 e0       	ldi	r20, 0x00	; 0
 69e:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin3 ,ArrayOfMotor[motor_num].pin3,STD_LOW);                 //step1
 6a2:	8c 81       	ldd	r24, Y+4	; 0x04
 6a4:	6d 81       	ldd	r22, Y+5	; 0x05
 6a6:	40 e0       	ldi	r20, 0x00	; 0
 6a8:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin4 ,ArrayOfMotor[motor_num].pin4,STD_LOW);
 6ac:	8e 81       	ldd	r24, Y+6	; 0x06
 6ae:	6f 81       	ldd	r22, Y+7	; 0x07
 6b0:	40 e0       	ldi	r20, 0x00	; 0
 6b2:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
 6b6:	8f e7       	ldi	r24, 0x7F	; 127
 6b8:	98 e3       	ldi	r25, 0x38	; 56
 6ba:	a1 e0       	ldi	r26, 0x01	; 1
 6bc:	81 50       	subi	r24, 0x01	; 1
 6be:	90 40       	sbci	r25, 0x00	; 0
 6c0:	a0 40       	sbci	r26, 0x00	; 0
 6c2:	e1 f7       	brne	.-8      	; 0x6bc <StepperMotor_viodrotateACW+0x46>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <StepperMotor_viodrotateACW+0x50>
 6c6:	00 00       	nop
	_delay_ms(50);
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin1 ,ArrayOfMotor[motor_num].pin1,STD_HIGH);
 6c8:	88 81       	ld	r24, Y
 6ca:	69 81       	ldd	r22, Y+1	; 0x01
 6cc:	41 e0       	ldi	r20, 0x01	; 1
 6ce:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin2 ,ArrayOfMotor[motor_num].pin2,STD_HIGH);
 6d2:	8a 81       	ldd	r24, Y+2	; 0x02
 6d4:	6b 81       	ldd	r22, Y+3	; 0x03
 6d6:	41 e0       	ldi	r20, 0x01	; 1
 6d8:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin3 ,ArrayOfMotor[motor_num].pin3,STD_LOW);               //step2
 6dc:	8c 81       	ldd	r24, Y+4	; 0x04
 6de:	6d 81       	ldd	r22, Y+5	; 0x05
 6e0:	40 e0       	ldi	r20, 0x00	; 0
 6e2:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin4 ,ArrayOfMotor[motor_num].pin4,STD_LOW);
 6e6:	8e 81       	ldd	r24, Y+6	; 0x06
 6e8:	6f 81       	ldd	r22, Y+7	; 0x07
 6ea:	40 e0       	ldi	r20, 0x00	; 0
 6ec:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
 6f0:	8f e7       	ldi	r24, 0x7F	; 127
 6f2:	98 e3       	ldi	r25, 0x38	; 56
 6f4:	a1 e0       	ldi	r26, 0x01	; 1
 6f6:	81 50       	subi	r24, 0x01	; 1
 6f8:	90 40       	sbci	r25, 0x00	; 0
 6fa:	a0 40       	sbci	r26, 0x00	; 0
 6fc:	e1 f7       	brne	.-8      	; 0x6f6 <StepperMotor_viodrotateACW+0x80>
 6fe:	00 c0       	rjmp	.+0      	; 0x700 <StepperMotor_viodrotateACW+0x8a>
 700:	00 00       	nop
	_delay_ms(50);
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin1 ,ArrayOfMotor[motor_num].pin1,STD_LOW);
 702:	88 81       	ld	r24, Y
 704:	69 81       	ldd	r22, Y+1	; 0x01
 706:	40 e0       	ldi	r20, 0x00	; 0
 708:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin2 ,ArrayOfMotor[motor_num].pin2,STD_HIGH);               //step3
 70c:	8a 81       	ldd	r24, Y+2	; 0x02
 70e:	6b 81       	ldd	r22, Y+3	; 0x03
 710:	41 e0       	ldi	r20, 0x01	; 1
 712:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin3 ,ArrayOfMotor[motor_num].pin3,STD_LOW);
 716:	8c 81       	ldd	r24, Y+4	; 0x04
 718:	6d 81       	ldd	r22, Y+5	; 0x05
 71a:	40 e0       	ldi	r20, 0x00	; 0
 71c:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin4 ,ArrayOfMotor[motor_num].pin4,STD_LOW);
 720:	8e 81       	ldd	r24, Y+6	; 0x06
 722:	6f 81       	ldd	r22, Y+7	; 0x07
 724:	40 e0       	ldi	r20, 0x00	; 0
 726:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
 72a:	8f e7       	ldi	r24, 0x7F	; 127
 72c:	98 e3       	ldi	r25, 0x38	; 56
 72e:	a1 e0       	ldi	r26, 0x01	; 1
 730:	81 50       	subi	r24, 0x01	; 1
 732:	90 40       	sbci	r25, 0x00	; 0
 734:	a0 40       	sbci	r26, 0x00	; 0
 736:	e1 f7       	brne	.-8      	; 0x730 <StepperMotor_viodrotateACW+0xba>
 738:	00 c0       	rjmp	.+0      	; 0x73a <StepperMotor_viodrotateACW+0xc4>
 73a:	00 00       	nop
	_delay_ms(50);
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin1 ,ArrayOfMotor[motor_num].pin1,STD_LOW);
 73c:	88 81       	ld	r24, Y
 73e:	69 81       	ldd	r22, Y+1	; 0x01
 740:	40 e0       	ldi	r20, 0x00	; 0
 742:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin2 ,ArrayOfMotor[motor_num].pin2,STD_HIGH);
 746:	8a 81       	ldd	r24, Y+2	; 0x02
 748:	6b 81       	ldd	r22, Y+3	; 0x03
 74a:	41 e0       	ldi	r20, 0x01	; 1
 74c:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin3 ,ArrayOfMotor[motor_num].pin3,STD_HIGH);                //step4
 750:	8c 81       	ldd	r24, Y+4	; 0x04
 752:	6d 81       	ldd	r22, Y+5	; 0x05
 754:	41 e0       	ldi	r20, 0x01	; 1
 756:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin4 ,ArrayOfMotor[motor_num].pin4,STD_LOW);
 75a:	8e 81       	ldd	r24, Y+6	; 0x06
 75c:	6f 81       	ldd	r22, Y+7	; 0x07
 75e:	40 e0       	ldi	r20, 0x00	; 0
 760:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
 764:	8f e7       	ldi	r24, 0x7F	; 127
 766:	98 e3       	ldi	r25, 0x38	; 56
 768:	a1 e0       	ldi	r26, 0x01	; 1
 76a:	81 50       	subi	r24, 0x01	; 1
 76c:	90 40       	sbci	r25, 0x00	; 0
 76e:	a0 40       	sbci	r26, 0x00	; 0
 770:	e1 f7       	brne	.-8      	; 0x76a <StepperMotor_viodrotateACW+0xf4>
 772:	00 c0       	rjmp	.+0      	; 0x774 <StepperMotor_viodrotateACW+0xfe>
 774:	00 00       	nop
	_delay_ms(50);
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin1 ,ArrayOfMotor[motor_num].pin1,STD_LOW);
 776:	88 81       	ld	r24, Y
 778:	69 81       	ldd	r22, Y+1	; 0x01
 77a:	40 e0       	ldi	r20, 0x00	; 0
 77c:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin2 ,ArrayOfMotor[motor_num].pin2,STD_LOW);              //step5
 780:	8a 81       	ldd	r24, Y+2	; 0x02
 782:	6b 81       	ldd	r22, Y+3	; 0x03
 784:	40 e0       	ldi	r20, 0x00	; 0
 786:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin3 ,ArrayOfMotor[motor_num].pin3,STD_HIGH);
 78a:	8c 81       	ldd	r24, Y+4	; 0x04
 78c:	6d 81       	ldd	r22, Y+5	; 0x05
 78e:	41 e0       	ldi	r20, 0x01	; 1
 790:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin4 ,ArrayOfMotor[motor_num].pin4,STD_LOW);
 794:	8e 81       	ldd	r24, Y+6	; 0x06
 796:	6f 81       	ldd	r22, Y+7	; 0x07
 798:	40 e0       	ldi	r20, 0x00	; 0
 79a:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
 79e:	8f e7       	ldi	r24, 0x7F	; 127
 7a0:	98 e3       	ldi	r25, 0x38	; 56
 7a2:	a1 e0       	ldi	r26, 0x01	; 1
 7a4:	81 50       	subi	r24, 0x01	; 1
 7a6:	90 40       	sbci	r25, 0x00	; 0
 7a8:	a0 40       	sbci	r26, 0x00	; 0
 7aa:	e1 f7       	brne	.-8      	; 0x7a4 <StepperMotor_viodrotateACW+0x12e>
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <StepperMotor_viodrotateACW+0x138>
 7ae:	00 00       	nop
	_delay_ms(50);
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin1 ,ArrayOfMotor[motor_num].pin1,STD_LOW);
 7b0:	88 81       	ld	r24, Y
 7b2:	69 81       	ldd	r22, Y+1	; 0x01
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin2 ,ArrayOfMotor[motor_num].pin2,STD_LOW);
 7ba:	8a 81       	ldd	r24, Y+2	; 0x02
 7bc:	6b 81       	ldd	r22, Y+3	; 0x03
 7be:	40 e0       	ldi	r20, 0x00	; 0
 7c0:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin3 ,ArrayOfMotor[motor_num].pin3,STD_HIGH);                //step 6
 7c4:	8c 81       	ldd	r24, Y+4	; 0x04
 7c6:	6d 81       	ldd	r22, Y+5	; 0x05
 7c8:	41 e0       	ldi	r20, 0x01	; 1
 7ca:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin4 ,ArrayOfMotor[motor_num].pin4,STD_HIGH);
 7ce:	8e 81       	ldd	r24, Y+6	; 0x06
 7d0:	6f 81       	ldd	r22, Y+7	; 0x07
 7d2:	41 e0       	ldi	r20, 0x01	; 1
 7d4:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
 7d8:	8f ef       	ldi	r24, 0xFF	; 255
 7da:	90 e7       	ldi	r25, 0x70	; 112
 7dc:	a2 e0       	ldi	r26, 0x02	; 2
 7de:	81 50       	subi	r24, 0x01	; 1
 7e0:	90 40       	sbci	r25, 0x00	; 0
 7e2:	a0 40       	sbci	r26, 0x00	; 0
 7e4:	e1 f7       	brne	.-8      	; 0x7de <StepperMotor_viodrotateACW+0x168>
 7e6:	00 c0       	rjmp	.+0      	; 0x7e8 <StepperMotor_viodrotateACW+0x172>
 7e8:	00 00       	nop
	_delay_ms(100);
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin1 ,ArrayOfMotor[motor_num].pin1,STD_LOW);
 7ea:	88 81       	ld	r24, Y
 7ec:	69 81       	ldd	r22, Y+1	; 0x01
 7ee:	40 e0       	ldi	r20, 0x00	; 0
 7f0:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin2 ,ArrayOfMotor[motor_num].pin2,STD_LOW);
 7f4:	8a 81       	ldd	r24, Y+2	; 0x02
 7f6:	6b 81       	ldd	r22, Y+3	; 0x03
 7f8:	40 e0       	ldi	r20, 0x00	; 0
 7fa:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin3 ,ArrayOfMotor[motor_num].pin3,STD_LOW);                   //step7
 7fe:	8c 81       	ldd	r24, Y+4	; 0x04
 800:	6d 81       	ldd	r22, Y+5	; 0x05
 802:	40 e0       	ldi	r20, 0x00	; 0
 804:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin4 ,ArrayOfMotor[motor_num].pin4,STD_HIGH);
 808:	8e 81       	ldd	r24, Y+6	; 0x06
 80a:	6f 81       	ldd	r22, Y+7	; 0x07
 80c:	41 e0       	ldi	r20, 0x01	; 1
 80e:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
 812:	8f e7       	ldi	r24, 0x7F	; 127
 814:	98 e3       	ldi	r25, 0x38	; 56
 816:	a1 e0       	ldi	r26, 0x01	; 1
 818:	81 50       	subi	r24, 0x01	; 1
 81a:	90 40       	sbci	r25, 0x00	; 0
 81c:	a0 40       	sbci	r26, 0x00	; 0
 81e:	e1 f7       	brne	.-8      	; 0x818 <StepperMotor_viodrotateACW+0x1a2>
 820:	00 c0       	rjmp	.+0      	; 0x822 <StepperMotor_viodrotateACW+0x1ac>
 822:	00 00       	nop
	_delay_ms(50);
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin1 ,ArrayOfMotor[motor_num].pin1,STD_HIGH);
 824:	88 81       	ld	r24, Y
 826:	69 81       	ldd	r22, Y+1	; 0x01
 828:	41 e0       	ldi	r20, 0x01	; 1
 82a:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin2 ,ArrayOfMotor[motor_num].pin2,STD_LOW);
 82e:	8a 81       	ldd	r24, Y+2	; 0x02
 830:	6b 81       	ldd	r22, Y+3	; 0x03
 832:	40 e0       	ldi	r20, 0x00	; 0
 834:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin3 ,ArrayOfMotor[motor_num].pin3,STD_LOW);               // step8
 838:	8c 81       	ldd	r24, Y+4	; 0x04
 83a:	6d 81       	ldd	r22, Y+5	; 0x05
 83c:	40 e0       	ldi	r20, 0x00	; 0
 83e:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
	dio_vidWriteChannel(ArrayOfMotor[motor_num].port_of_pin4 ,ArrayOfMotor[motor_num].pin4,STD_HIGH);
 842:	8e 81       	ldd	r24, Y+6	; 0x06
 844:	6f 81       	ldd	r22, Y+7	; 0x07
 846:	41 e0       	ldi	r20, 0x01	; 1
 848:	0e 94 c8 00 	call	0x190	; 0x190 <dio_vidWriteChannel>
 84c:	8f e7       	ldi	r24, 0x7F	; 127
 84e:	98 e3       	ldi	r25, 0x38	; 56
 850:	a1 e0       	ldi	r26, 0x01	; 1
 852:	81 50       	subi	r24, 0x01	; 1
 854:	90 40       	sbci	r25, 0x00	; 0
 856:	a0 40       	sbci	r26, 0x00	; 0
 858:	e1 f7       	brne	.-8      	; 0x852 <StepperMotor_viodrotateACW+0x1dc>
 85a:	00 c0       	rjmp	.+0      	; 0x85c <StepperMotor_viodrotateACW+0x1e6>
 85c:	00 00       	nop
	_delay_ms(50);
}
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	08 95       	ret

00000864 <main>:
int main(void)
{
	/*int period;
	DDRD = 0x0F;		/ * Make PORTD lower pins as output * /
	period = 100;		/ * Set period in between two steps * /*/
	StepperMotor_voidinit();
 864:	0e 94 27 02 	call	0x44e	; 0x44e <StepperMotor_voidinit>
	while (1)
	{		/* Rotate Stepper Motor clockwise with Half step sequence */
		for(int i=0;i<2;i++)
 868:	c0 e0       	ldi	r28, 0x00	; 0
 86a:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(period);
			PORTD = 0x01;
			_delay_ms(period);*/
		}
		
		PORTD = 0x09;		/* Last step to initial position */ 
 86c:	19 e0       	ldi	r17, 0x09	; 9
	DDRD = 0x0F;		/ * Make PORTD lower pins as output * /
	period = 100;		/ * Set period in between two steps * /*/
	StepperMotor_voidinit();
	while (1)
	{		/* Rotate Stepper Motor clockwise with Half step sequence */
		for(int i=0;i<2;i++)
 86e:	ee 24       	eor	r14, r14
 870:	ff 24       	eor	r15, r15
 872:	04 c0       	rjmp	.+8      	; 0x87c <main+0x18>
		{   
			StepperMotor_viodrotateCW(0) ;
 874:	80 e0       	ldi	r24, 0x00	; 0
 876:	0e 94 44 02 	call	0x488	; 0x488 <StepperMotor_viodrotateCW>
	DDRD = 0x0F;		/ * Make PORTD lower pins as output * /
	period = 100;		/ * Set period in between two steps * /*/
	StepperMotor_voidinit();
	while (1)
	{		/* Rotate Stepper Motor clockwise with Half step sequence */
		for(int i=0;i<2;i++)
 87a:	21 96       	adiw	r28, 0x01	; 1
 87c:	c2 30       	cpi	r28, 0x02	; 2
 87e:	d1 05       	cpc	r29, r1
 880:	cc f3       	brlt	.-14     	; 0x874 <main+0x10>
			_delay_ms(period);
			PORTD = 0x01;
			_delay_ms(period);*/
		}
		
		PORTD = 0x09;		/* Last step to initial position */ 
 882:	12 bb       	out	0x12, r17	; 18
 884:	8f ef       	ldi	r24, 0xFF	; 255
 886:	9d e3       	ldi	r25, 0x3D	; 61
 888:	a9 e4       	ldi	r26, 0x49	; 73
 88a:	81 50       	subi	r24, 0x01	; 1
 88c:	90 40       	sbci	r25, 0x00	; 0
 88e:	a0 40       	sbci	r26, 0x00	; 0
 890:	e1 f7       	brne	.-8      	; 0x88a <main+0x26>
 892:	00 c0       	rjmp	.+0      	; 0x894 <main+0x30>
 894:	00 00       	nop
			_delay_ms(period);
			PORTD = 0x06;
			_delay_ms(period);
			PORTD = 0x0C;
			_delay_ms(period);*/
			StepperMotor_viodrotateACW(0) ;
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	0e 94 3b 03 	call	0x676	; 0x676 <StepperMotor_viodrotateACW>
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	0e 94 3b 03 	call	0x676	; 0x676 <StepperMotor_viodrotateACW>
 8a2:	80 e0       	ldi	r24, 0x00	; 0
 8a4:	0e 94 3b 03 	call	0x676	; 0x676 <StepperMotor_viodrotateACW>
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	0e 94 3b 03 	call	0x676	; 0x676 <StepperMotor_viodrotateACW>
		} 
		
		PORTD = 0x09;
 8ae:	12 bb       	out	0x12, r17	; 18
 8b0:	8f ef       	ldi	r24, 0xFF	; 255
 8b2:	99 e6       	ldi	r25, 0x69	; 105
 8b4:	a8 e1       	ldi	r26, 0x18	; 24
 8b6:	81 50       	subi	r24, 0x01	; 1
 8b8:	90 40       	sbci	r25, 0x00	; 0
 8ba:	a0 40       	sbci	r26, 0x00	; 0
 8bc:	e1 f7       	brne	.-8      	; 0x8b6 <main+0x52>
 8be:	00 c0       	rjmp	.+0      	; 0x8c0 <main+0x5c>
 8c0:	00 00       	nop
	DDRD = 0x0F;		/ * Make PORTD lower pins as output * /
	period = 100;		/ * Set period in between two steps * /*/
	StepperMotor_voidinit();
	while (1)
	{		/* Rotate Stepper Motor clockwise with Half step sequence */
		for(int i=0;i<2;i++)
 8c2:	e7 01       	movw	r28, r14
 8c4:	db cf       	rjmp	.-74     	; 0x87c <main+0x18>

000008c6 <_exit>:
 8c6:	f8 94       	cli

000008c8 <__stop_program>:
 8c8:	ff cf       	rjmp	.-2      	; 0x8c8 <__stop_program>
