
adc_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000926  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000926  000009ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  000009ba  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000009bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00001110  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000107b  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b3  00000000  00000000  000022eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007bd  00000000  00000000  0000289e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  0000305c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061a  00000000  00000000  000034a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000082e  00000000  00000000  00003aba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__vector_1>
   8:	0c 94 85 03 	jmp	0x70a	; 0x70a <__vector_2>
   c:	0c 94 ac 03 	jmp	0x758	; 0x758 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 37       	cpi	r26, 0x72	; 114
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  8a:	0c 94 91 04 	jmp	0x922	; 0x922 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_calback>:
	led_toggle(led2);
	_delay_ms(200);
}
void adc_calback()
{
	result = ADC_u16ReadADCIninterrupt(0) ; 
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 c3 00 	call	0x186	; 0x186 <ADC_u16ReadADCIninterrupt>
  98:	90 93 61 00 	sts	0x0061, r25
  9c:	80 93 60 00 	sts	0x0060, r24
  a0:	08 95       	ret

000000a2 <interupt_callback>:
    }
}

void interupt_callback()
{
	led_toggle(led2);
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	0e 94 30 04 	call	0x860	; 0x860 <led_toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	91 ee       	ldi	r25, 0xE1	; 225
  ac:	a4 e0       	ldi	r26, 0x04	; 4
  ae:	81 50       	subi	r24, 0x01	; 1
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	a0 40       	sbci	r26, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <interupt_callback+0xc>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <interupt_callback+0x16>
  b8:	00 00       	nop
	_delay_ms(200);
}
  ba:	08 95       	ret

000000bc <main>:

void interupt_callback();
void adc_calback();

int main(void)
{    ADC_voidCallBack(adc_calback);
  bc:	89 e4       	ldi	r24, 0x49	; 73
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <ADC_voidCallBack>
	EXT0_voidCallBack(interupt_callback);
  c4:	81 e5       	ldi	r24, 0x51	; 81
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 25 03 	call	0x64a	; 0x64a <EXT0_voidCallBack>
	EXT0_voidInit();
  cc:	0e 94 ff 02 	call	0x5fe	; 0x5fe <EXT0_voidInit>
	ADC_voidInit();
  d0:	0e 94 96 00 	call	0x12c	; 0x12c <ADC_voidInit>
	led_init();
  d4:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <led_init>
	dio_vidEnablePullUp(DIO_PORTD,DIO_PIN2) ; 
  d8:	83 e0       	ldi	r24, 0x03	; 3
  da:	62 e0       	ldi	r22, 0x02	; 2
  dc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <dio_vidEnablePullUp>
    while(1)
    {
        if(result >2500)
  e0:	80 91 60 00 	lds	r24, 0x0060
  e4:	90 91 61 00 	lds	r25, 0x0061
  e8:	29 e0       	ldi	r18, 0x09	; 9
  ea:	85 3c       	cpi	r24, 0xC5	; 197
  ec:	92 07       	cpc	r25, r18
  ee:	20 f0       	brcs	.+8      	; 0xf8 <main+0x3c>
		{
			led_on(led1);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <led_on>
  f6:	f4 cf       	rjmp	.-24     	; 0xe0 <main+0x24>
			
		}	
		else
		{  
			led_off(led1);
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	0e 94 0c 04 	call	0x818	; 0x818 <led_off>
  fe:	f0 cf       	rjmp	.-32     	; 0xe0 <main+0x24>

00000100 <ADC_voidEnable>:
/****************************************************************/

void ADC_voidEnable()
{
	
	SET_BIT( ADCSRA , 7 );
 100:	37 9a       	sbi	0x06, 7	; 6
	
}
 102:	08 95       	ret

00000104 <ADC_voidInterrputEnable>:

void ADC_voidInterrputEnable()
{

	 // enable adcinterrupt 
	SET_BIT( ADCSRA , ADIE );
 104:	33 9a       	sbi	0x06, 3	; 6
	// enable global interrupt 
	SET_BIT(SREG,7) ;
 106:	8f b7       	in	r24, 0x3f	; 63
 108:	80 68       	ori	r24, 0x80	; 128
 10a:	8f bf       	out	0x3f, r24	; 63
	
}
 10c:	08 95       	ret

0000010e <ADC_voidDisable>:
/****************************************************************/

void ADC_voidDisable()
{
	
	CLEAR_BIT( ADCSRA , 7 );
 10e:	37 98       	cbi	0x06, 7	; 6
	
}
 110:	08 95       	ret

00000112 <ADC_voidStartConversion>:
/****************************************************************/

void ADC_voidStartConversion()
{
	
	SET_BIT( ADCSRA , 6 );
 112:	36 9a       	sbi	0x06, 6	; 6
	
}
 114:	08 95       	ret

00000116 <ADC_voidAutoTrigger>:

	
	/** Enable ADC Auto Trigger	 							   **/
	/** ADATE = 1 =====> 	SET_BIT( ADATE , 5 ); 			   **/

    SET_BIT( ADCSRA , 5 );
 116:	35 9a       	sbi	0x06, 5	; 6
	SET_BIT( SFIOR , 5);
	CLEAR_BIT( SFIOR , 6 );
	CLEAR_BIT( SFIOR , 7 );
	
	#elif ADC_AUTO_TRIGGER_SOURCE == EXTERNAL_INTERRPUT_REQUEST_0
	CLEAR_BIT( SFIOR , 5 );
 118:	80 b7       	in	r24, 0x30	; 48
 11a:	8f 7d       	andi	r24, 0xDF	; 223
 11c:	80 bf       	out	0x30, r24	; 48
	SET_BIT( SFIOR , 6 );
 11e:	80 b7       	in	r24, 0x30	; 48
 120:	80 64       	ori	r24, 0x40	; 64
 122:	80 bf       	out	0x30, r24	; 48
	CLEAR_BIT( SFIOR , 7);
 124:	80 b7       	in	r24, 0x30	; 48
 126:	8f 77       	andi	r24, 0x7F	; 127
 128:	80 bf       	out	0x30, r24	; 48
	SET_BIT( SFIOR , 7 );	
	
	#endif
	/* End ( if ) condition for Macros */
	
}
 12a:	08 95       	ret

0000012c <ADC_voidInit>:

void ADC_voidInit (void)
{
	  
	   //clear registers 
	   ADCSRA = 0;
 12c:	16 b8       	out	0x06, r1	; 6
	   ADMUX = 0;
 12e:	17 b8       	out	0x07, r1	; 7
	   // set  avcc as refrence and percision 
	   ADMUX |= AVCC |ADC_Percision;
 130:	3e 9a       	sbi	0x07, 6	; 7
	   // set prescaler 
	   ADCSRA |=ADC_PRESCALLER ;
 132:	86 b1       	in	r24, 0x06	; 6
 134:	86 60       	ori	r24, 0x06	; 6
 136:	86 b9       	out	0x06, r24	; 6
	  
	   ADC_voidEnable();
 138:	0e 94 80 00 	call	0x100	; 0x100 <ADC_voidEnable>
	   
	   #if ADC_MODE ==ADC_AUTO_TRIGGER_SOURCE 
	   ADC_voidAutoTrigger() ;
 13c:	0e 94 8b 00 	call	0x116	; 0x116 <ADC_voidAutoTrigger>
	   	ADC_voidInterrputEnable();
 140:	0e 94 82 00 	call	0x104	; 0x104 <ADC_voidInterrputEnable>
	    
	
	/* End ( if ) condition for Macros */	
	
	
}
 144:	08 95       	ret

00000146 <ADC_u16ReadADCInMV>:
/****************************************************************/

u16 ADC_u16ReadADCInMV(u8 channel)
{  
     // clear audmux then input channel 
	ADMUX &= 0b11100000;
 146:	97 b1       	in	r25, 0x07	; 7
 148:	90 7e       	andi	r25, 0xE0	; 224
 14a:	97 b9       	out	0x07, r25	; 7
	ADMUX |=  (channel & 0x0f);
 14c:	97 b1       	in	r25, 0x07	; 7
 14e:	8f 70       	andi	r24, 0x0F	; 15
 150:	98 2b       	or	r25, r24
 152:	97 b9       	out	0x07, r25	; 7
			
	ADC_voidStartConversion();
 154:	0e 94 89 00 	call	0x112	; 0x112 <ADC_voidStartConversion>
		
	// check for the ADC flag pooling 
	while(CHECK_BIT(ADCSRA,ADIF)==0);
 158:	86 b1       	in	r24, 0x06	; 6
 15a:	84 ff       	sbrs	r24, 4
 15c:	fd cf       	rjmp	.-6      	; 0x158 <ADC_u16ReadADCInMV+0x12>
	// clear the adc flag by set one to it 
	SET_BIT(ADCSRA,ADIF);
 15e:	34 9a       	sbi	0x06, 4	; 6
		
			
	#if ADC_Percision == TEN_BITPERCISION
	   return (ADC * 5000UL / 1023);  // value in MV 
 160:	64 b1       	in	r22, 0x04	; 4
 162:	75 b1       	in	r23, 0x05	; 5
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	28 e8       	ldi	r18, 0x88	; 136
 16a:	33 e1       	ldi	r19, 0x13	; 19
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	50 e0       	ldi	r21, 0x00	; 0
 170:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__mulsi3>
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	33 e0       	ldi	r19, 0x03	; 3
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	0e 94 6f 04 	call	0x8de	; 0x8de <__udivmodsi4>
	#elif ADC_Percision ==EIGHT_BITPERCISION
	return  (ADCH * 5000UL / 1023) ;
	 
	 #endif
	
}
 180:	82 2f       	mov	r24, r18
 182:	93 2f       	mov	r25, r19
 184:	08 95       	ret

00000186 <ADC_u16ReadADCIninterrupt>:
/****************************************************************/

u16  ADC_u16ReadADCIninterrupt(  u8 channel )
{    
	// select channel 
	 ADMUX &= 0b11100000;
 186:	97 b1       	in	r25, 0x07	; 7
 188:	90 7e       	andi	r25, 0xE0	; 224
 18a:	97 b9       	out	0x07, r25	; 7
	 ADMUX |=  (channel & 0x0f);
 18c:	97 b1       	in	r25, 0x07	; 7
 18e:	8f 70       	andi	r24, 0x0F	; 15
 190:	98 2b       	or	r25, r24
 192:	97 b9       	out	0x07, r25	; 7

	  
	  #if ADC_Percision == TEN_BITPERCISION
	  return (ADC * 5000UL / 1023);  // value in MV
 194:	64 b1       	in	r22, 0x04	; 4
 196:	75 b1       	in	r23, 0x05	; 5
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	28 e8       	ldi	r18, 0x88	; 136
 19e:	33 e1       	ldi	r19, 0x13	; 19
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__mulsi3>
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	33 e0       	ldi	r19, 0x03	; 3
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	50 e0       	ldi	r21, 0x00	; 0
 1b0:	0e 94 6f 04 	call	0x8de	; 0x8de <__udivmodsi4>
	  #elif ADC_Percision ==EIGHT_BITPERCISION
	  return  (ADCH * 5000UL / 1023) ;
	  
	  #endif
	
	}
 1b4:	82 2f       	mov	r24, r18
 1b6:	93 2f       	mov	r25, r19
 1b8:	08 95       	ret

000001ba <ADC_voidCallBack>:
	
	
	
	void ADC_voidCallBack(pf addresscpy)
	{
		if(addresscpy != NULL)
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	21 f0       	breq	.+8      	; 0x1c6 <ADC_voidCallBack+0xc>
		{
			p_ADC= addresscpy;
 1be:	90 93 6b 00 	sts	0x006B, r25
 1c2:	80 93 6a 00 	sts	0x006A, r24
 1c6:	08 95       	ret

000001c8 <__vector_16>:
		}
	}
	
	void __vector_16(void)
	{  	
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
			p_ADC();	
 1ea:	e0 91 6a 00 	lds	r30, 0x006A
 1ee:	f0 91 6b 00 	lds	r31, 0x006B
 1f2:	09 95       	icall
	}
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	7f 91       	pop	r23
 202:	6f 91       	pop	r22
 204:	5f 91       	pop	r21
 206:	4f 91       	pop	r20
 208:	3f 91       	pop	r19
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <ADC_u16ReadADCChannels>:
	/* Pre_condition  :  this function must be used after ADC 		*/
	/*     				 initialized and enable global interrupt			  */
	/****************************************************************/
	
	void  ADC_u16ReadADCChannels(  u16 result[])
	{   result[0]= ADC_u16ReadADCInMV(0) ;
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	ec 01       	movw	r28, r24
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	0e 94 a3 00 	call	0x146	; 0x146 <ADC_u16ReadADCInMV>
 222:	99 83       	std	Y+1, r25	; 0x01
 224:	88 83       	st	Y, r24
		result[1]= ADC_u16ReadADCInMV(1) ;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 a3 00 	call	0x146	; 0x146 <ADC_u16ReadADCInMV>
 22c:	9b 83       	std	Y+3, r25	; 0x03
 22e:	8a 83       	std	Y+2, r24	; 0x02
		result[2]= ADC_u16ReadADCInMV(2) ;
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	0e 94 a3 00 	call	0x146	; 0x146 <ADC_u16ReadADCInMV>
 236:	9d 83       	std	Y+5, r25	; 0x05
 238:	8c 83       	std	Y+4, r24	; 0x04
		result[3]= ADC_u16ReadADCInMV(3) ;
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	0e 94 a3 00 	call	0x146	; 0x146 <ADC_u16ReadADCInMV>
 240:	9f 83       	std	Y+7, r25	; 0x07
 242:	8e 83       	std	Y+6, r24	; 0x06
		result[4]= ADC_u16ReadADCInMV(4) ;
 244:	84 e0       	ldi	r24, 0x04	; 4
 246:	0e 94 a3 00 	call	0x146	; 0x146 <ADC_u16ReadADCInMV>
 24a:	99 87       	std	Y+9, r25	; 0x09
 24c:	88 87       	std	Y+8, r24	; 0x08
		result[5]= ADC_u16ReadADCInMV(5) ;
 24e:	85 e0       	ldi	r24, 0x05	; 5
 250:	0e 94 a3 00 	call	0x146	; 0x146 <ADC_u16ReadADCInMV>
 254:	9b 87       	std	Y+11, r25	; 0x0b
 256:	8a 87       	std	Y+10, r24	; 0x0a
		result[6]= ADC_u16ReadADCInMV(6) ;
 258:	86 e0       	ldi	r24, 0x06	; 6
 25a:	0e 94 a3 00 	call	0x146	; 0x146 <ADC_u16ReadADCInMV>
 25e:	9d 87       	std	Y+13, r25	; 0x0d
 260:	8c 87       	std	Y+12, r24	; 0x0c
		result[7]= ADC_u16ReadADCInMV(7) ;
 262:	87 e0       	ldi	r24, 0x07	; 7
 264:	0e 94 a3 00 	call	0x146	; 0x146 <ADC_u16ReadADCInMV>
 268:	9f 87       	std	Y+15, r25	; 0x0f
 26a:	8e 87       	std	Y+14, r24	; 0x0e
	}
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <button_vidInit>:
* \Parameters (in) : None                                                                            
* \Return value:   : None                                
*******************************************************************************/
void button_vidInit(void)
{
	dio_vidConfigChannel(BUTTON0_PORT,BUTTON0_PIN,INPUT);
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	67 e0       	ldi	r22, 0x07	; 7
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	0e 94 6e 01 	call	0x2dc	; 0x2dc <dio_vidConfigChannel>
	dio_vidConfigChannel(BUTTON1_PORT,BUTTON1_PIN,INPUT);
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	66 e0       	ldi	r22, 0x06	; 6
 280:	40 e0       	ldi	r20, 0x00	; 0
 282:	0e 94 6e 01 	call	0x2dc	; 0x2dc <dio_vidConfigChannel>
	dio_vidConfigChannel(BUTTON2_PORT,BUTTON2_PIN,INPUT);
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	65 e0       	ldi	r22, 0x05	; 5
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	0e 94 6e 01 	call	0x2dc	; 0x2dc <dio_vidConfigChannel>
}
 290:	08 95       	ret

00000292 <Button_GetStatus>:
*                                     RELEASED                                  
*******************************************************************************/
button_status_t Button_GetStatus(button_id_t button)
{
	button_status_t status = RELEASED;
	switch (button)
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	71 f0       	breq	.+28     	; 0x2b2 <Button_GetStatus+0x20>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	18 f0       	brcs	.+6      	; 0x2a0 <Button_GetStatus+0xe>
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	e1 f4       	brne	.+56     	; 0x2d6 <Button_GetStatus+0x44>
 29e:	12 c0       	rjmp	.+36     	; 0x2c4 <Button_GetStatus+0x32>
			status = RELEASED;
		}

#else
		/*	PULL UP	*/
		if (dio_dioLevelReadChannel(BUTTON0_PORT,BUTTON0_PIN) == STD_LOW)
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	67 e0       	ldi	r22, 0x07	; 7
 2a4:	0e 94 aa 02 	call	0x554	; 0x554 <dio_dioLevelReadChannel>
* \Return value:   : button_status_t  PRESSED
*                                     RELEASED                                  
*******************************************************************************/
button_status_t Button_GetStatus(button_id_t button)
{
	button_status_t status = RELEASED;
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	88 23       	and	r24, r24
 2ac:	a9 f0       	breq	.+42     	; 0x2d8 <Button_GetStatus+0x46>
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	13 c0       	rjmp	.+38     	; 0x2d8 <Button_GetStatus+0x46>
			status = RELEASED;
		}

#else
		/*	PULL UP	*/
		if (dio_dioLevelReadChannel(BUTTON1_PORT,BUTTON1_PIN) == STD_LOW)
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	66 e0       	ldi	r22, 0x06	; 6
 2b6:	0e 94 aa 02 	call	0x554	; 0x554 <dio_dioLevelReadChannel>
* \Return value:   : button_status_t  PRESSED
*                                     RELEASED                                  
*******************************************************************************/
button_status_t Button_GetStatus(button_id_t button)
{
	button_status_t status = RELEASED;
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	88 23       	and	r24, r24
 2be:	61 f0       	breq	.+24     	; 0x2d8 <Button_GetStatus+0x46>
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0a c0       	rjmp	.+20     	; 0x2d8 <Button_GetStatus+0x46>
			status = RELEASED;
		}

#else
		/*	PULL UP	*/
		if (dio_dioLevelReadChannel(BUTTON2_PORT,BUTTON2_PIN) == STD_LOW)
 2c4:	83 e0       	ldi	r24, 0x03	; 3
 2c6:	65 e0       	ldi	r22, 0x05	; 5
 2c8:	0e 94 aa 02 	call	0x554	; 0x554 <dio_dioLevelReadChannel>
* \Return value:   : button_status_t  PRESSED
*                                     RELEASED                                  
*******************************************************************************/
button_status_t Button_GetStatus(button_id_t button)
{
	button_status_t status = RELEASED;
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	88 23       	and	r24, r24
 2d0:	19 f0       	breq	.+6      	; 0x2d8 <Button_GetStatus+0x46>
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <Button_GetStatus+0x46>
 2d6:	90 e0       	ldi	r25, 0x00	; 0
		}
#endif
		break;
	}
	return status;
}
 2d8:	89 2f       	mov	r24, r25
 2da:	08 95       	ret

000002dc <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	31 f1       	breq	.+76     	; 0x32c <dio_vidConfigChannel+0x50>
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	38 f0       	brcs	.+14     	; 0x2f2 <dio_vidConfigChannel+0x16>
 2e4:	82 30       	cpi	r24, 0x02	; 2
 2e6:	09 f4       	brne	.+2      	; 0x2ea <dio_vidConfigChannel+0xe>
 2e8:	3e c0       	rjmp	.+124    	; 0x366 <dio_vidConfigChannel+0x8a>
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	09 f0       	breq	.+2      	; 0x2f0 <dio_vidConfigChannel+0x14>
 2ee:	74 c0       	rjmp	.+232    	; 0x3d8 <dio_vidConfigChannel+0xfc>
 2f0:	57 c0       	rjmp	.+174    	; 0x3a0 <dio_vidConfigChannel+0xc4>
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
 2f2:	41 30       	cpi	r20, 0x01	; 1
 2f4:	69 f4       	brne	.+26     	; 0x310 <dio_vidConfigChannel+0x34>
		{
			SET_BIT (DIO_DDRA_REG,channel);
 2f6:	2a b3       	in	r18, 0x1a	; 26
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	ac 01       	movw	r20, r24
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <dio_vidConfigChannel+0x28>
 300:	44 0f       	add	r20, r20
 302:	55 1f       	adc	r21, r21
 304:	6a 95       	dec	r22
 306:	e2 f7       	brpl	.-8      	; 0x300 <dio_vidConfigChannel+0x24>
 308:	ba 01       	movw	r22, r20
 30a:	62 2b       	or	r22, r18
 30c:	6a bb       	out	0x1a, r22	; 26
 30e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
 310:	2a b3       	in	r18, 0x1a	; 26
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	ac 01       	movw	r20, r24
 318:	02 c0       	rjmp	.+4      	; 0x31e <dio_vidConfigChannel+0x42>
 31a:	44 0f       	add	r20, r20
 31c:	55 1f       	adc	r21, r21
 31e:	6a 95       	dec	r22
 320:	e2 f7       	brpl	.-8      	; 0x31a <dio_vidConfigChannel+0x3e>
 322:	ba 01       	movw	r22, r20
 324:	60 95       	com	r22
 326:	62 23       	and	r22, r18
 328:	6a bb       	out	0x1a, r22	; 26
 32a:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
 32c:	41 30       	cpi	r20, 0x01	; 1
 32e:	69 f4       	brne	.+26     	; 0x34a <dio_vidConfigChannel+0x6e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
 330:	27 b3       	in	r18, 0x17	; 23
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	ac 01       	movw	r20, r24
 338:	02 c0       	rjmp	.+4      	; 0x33e <dio_vidConfigChannel+0x62>
 33a:	44 0f       	add	r20, r20
 33c:	55 1f       	adc	r21, r21
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <dio_vidConfigChannel+0x5e>
 342:	ba 01       	movw	r22, r20
 344:	62 2b       	or	r22, r18
 346:	67 bb       	out	0x17, r22	; 23
 348:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 34a:	27 b3       	in	r18, 0x17	; 23
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	ac 01       	movw	r20, r24
 352:	02 c0       	rjmp	.+4      	; 0x358 <dio_vidConfigChannel+0x7c>
 354:	44 0f       	add	r20, r20
 356:	55 1f       	adc	r21, r21
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <dio_vidConfigChannel+0x78>
 35c:	ba 01       	movw	r22, r20
 35e:	60 95       	com	r22
 360:	62 23       	and	r22, r18
 362:	67 bb       	out	0x17, r22	; 23
 364:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 366:	41 30       	cpi	r20, 0x01	; 1
 368:	69 f4       	brne	.+26     	; 0x384 <dio_vidConfigChannel+0xa8>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 36a:	24 b3       	in	r18, 0x14	; 20
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	ac 01       	movw	r20, r24
 372:	02 c0       	rjmp	.+4      	; 0x378 <dio_vidConfigChannel+0x9c>
 374:	44 0f       	add	r20, r20
 376:	55 1f       	adc	r21, r21
 378:	6a 95       	dec	r22
 37a:	e2 f7       	brpl	.-8      	; 0x374 <dio_vidConfigChannel+0x98>
 37c:	ba 01       	movw	r22, r20
 37e:	62 2b       	or	r22, r18
 380:	64 bb       	out	0x14, r22	; 20
 382:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 384:	24 b3       	in	r18, 0x14	; 20
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	ac 01       	movw	r20, r24
 38c:	02 c0       	rjmp	.+4      	; 0x392 <dio_vidConfigChannel+0xb6>
 38e:	44 0f       	add	r20, r20
 390:	55 1f       	adc	r21, r21
 392:	6a 95       	dec	r22
 394:	e2 f7       	brpl	.-8      	; 0x38e <dio_vidConfigChannel+0xb2>
 396:	ba 01       	movw	r22, r20
 398:	60 95       	com	r22
 39a:	62 23       	and	r22, r18
 39c:	64 bb       	out	0x14, r22	; 20
 39e:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 3a0:	41 30       	cpi	r20, 0x01	; 1
 3a2:	69 f4       	brne	.+26     	; 0x3be <dio_vidConfigChannel+0xe2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 3a4:	21 b3       	in	r18, 0x11	; 17
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	ac 01       	movw	r20, r24
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <dio_vidConfigChannel+0xd6>
 3ae:	44 0f       	add	r20, r20
 3b0:	55 1f       	adc	r21, r21
 3b2:	6a 95       	dec	r22
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <dio_vidConfigChannel+0xd2>
 3b6:	ba 01       	movw	r22, r20
 3b8:	62 2b       	or	r22, r18
 3ba:	61 bb       	out	0x11, r22	; 17
 3bc:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 3be:	21 b3       	in	r18, 0x11	; 17
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	ac 01       	movw	r20, r24
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <dio_vidConfigChannel+0xf0>
 3c8:	44 0f       	add	r20, r20
 3ca:	55 1f       	adc	r21, r21
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <dio_vidConfigChannel+0xec>
 3d0:	ba 01       	movw	r22, r20
 3d2:	60 95       	com	r22
 3d4:	62 23       	and	r22, r18
 3d6:	61 bb       	out	0x11, r22	; 17
 3d8:	08 95       	ret

000003da <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	31 f1       	breq	.+76     	; 0x42a <dio_vidWriteChannel+0x50>
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	38 f0       	brcs	.+14     	; 0x3f0 <dio_vidWriteChannel+0x16>
 3e2:	82 30       	cpi	r24, 0x02	; 2
 3e4:	09 f4       	brne	.+2      	; 0x3e8 <dio_vidWriteChannel+0xe>
 3e6:	3e c0       	rjmp	.+124    	; 0x464 <dio_vidWriteChannel+0x8a>
 3e8:	83 30       	cpi	r24, 0x03	; 3
 3ea:	09 f0       	breq	.+2      	; 0x3ee <dio_vidWriteChannel+0x14>
 3ec:	74 c0       	rjmp	.+232    	; 0x4d6 <dio_vidWriteChannel+0xfc>
 3ee:	57 c0       	rjmp	.+174    	; 0x49e <dio_vidWriteChannel+0xc4>
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 3f0:	44 23       	and	r20, r20
 3f2:	71 f4       	brne	.+28     	; 0x410 <dio_vidWriteChannel+0x36>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 3f4:	2b b3       	in	r18, 0x1b	; 27
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	ac 01       	movw	r20, r24
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <dio_vidWriteChannel+0x28>
 3fe:	44 0f       	add	r20, r20
 400:	55 1f       	adc	r21, r21
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <dio_vidWriteChannel+0x24>
 406:	ba 01       	movw	r22, r20
 408:	60 95       	com	r22
 40a:	62 23       	and	r22, r18
 40c:	6b bb       	out	0x1b, r22	; 27
 40e:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 410:	2b b3       	in	r18, 0x1b	; 27
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	ac 01       	movw	r20, r24
 418:	02 c0       	rjmp	.+4      	; 0x41e <dio_vidWriteChannel+0x44>
 41a:	44 0f       	add	r20, r20
 41c:	55 1f       	adc	r21, r21
 41e:	6a 95       	dec	r22
 420:	e2 f7       	brpl	.-8      	; 0x41a <dio_vidWriteChannel+0x40>
 422:	ba 01       	movw	r22, r20
 424:	62 2b       	or	r22, r18
 426:	6b bb       	out	0x1b, r22	; 27
 428:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 42a:	44 23       	and	r20, r20
 42c:	71 f4       	brne	.+28     	; 0x44a <dio_vidWriteChannel+0x70>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 42e:	28 b3       	in	r18, 0x18	; 24
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	ac 01       	movw	r20, r24
 436:	02 c0       	rjmp	.+4      	; 0x43c <dio_vidWriteChannel+0x62>
 438:	44 0f       	add	r20, r20
 43a:	55 1f       	adc	r21, r21
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <dio_vidWriteChannel+0x5e>
 440:	ba 01       	movw	r22, r20
 442:	60 95       	com	r22
 444:	62 23       	and	r22, r18
 446:	68 bb       	out	0x18, r22	; 24
 448:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 44a:	28 b3       	in	r18, 0x18	; 24
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	ac 01       	movw	r20, r24
 452:	02 c0       	rjmp	.+4      	; 0x458 <dio_vidWriteChannel+0x7e>
 454:	44 0f       	add	r20, r20
 456:	55 1f       	adc	r21, r21
 458:	6a 95       	dec	r22
 45a:	e2 f7       	brpl	.-8      	; 0x454 <dio_vidWriteChannel+0x7a>
 45c:	ba 01       	movw	r22, r20
 45e:	62 2b       	or	r22, r18
 460:	68 bb       	out	0x18, r22	; 24
 462:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 464:	44 23       	and	r20, r20
 466:	71 f4       	brne	.+28     	; 0x484 <dio_vidWriteChannel+0xaa>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 468:	25 b3       	in	r18, 0x15	; 21
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	ac 01       	movw	r20, r24
 470:	02 c0       	rjmp	.+4      	; 0x476 <dio_vidWriteChannel+0x9c>
 472:	44 0f       	add	r20, r20
 474:	55 1f       	adc	r21, r21
 476:	6a 95       	dec	r22
 478:	e2 f7       	brpl	.-8      	; 0x472 <dio_vidWriteChannel+0x98>
 47a:	ba 01       	movw	r22, r20
 47c:	60 95       	com	r22
 47e:	62 23       	and	r22, r18
 480:	65 bb       	out	0x15, r22	; 21
 482:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 484:	25 b3       	in	r18, 0x15	; 21
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	ac 01       	movw	r20, r24
 48c:	02 c0       	rjmp	.+4      	; 0x492 <dio_vidWriteChannel+0xb8>
 48e:	44 0f       	add	r20, r20
 490:	55 1f       	adc	r21, r21
 492:	6a 95       	dec	r22
 494:	e2 f7       	brpl	.-8      	; 0x48e <dio_vidWriteChannel+0xb4>
 496:	ba 01       	movw	r22, r20
 498:	62 2b       	or	r22, r18
 49a:	65 bb       	out	0x15, r22	; 21
 49c:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 49e:	44 23       	and	r20, r20
 4a0:	71 f4       	brne	.+28     	; 0x4be <dio_vidWriteChannel+0xe4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 4a2:	22 b3       	in	r18, 0x12	; 18
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	ac 01       	movw	r20, r24
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <dio_vidWriteChannel+0xd6>
 4ac:	44 0f       	add	r20, r20
 4ae:	55 1f       	adc	r21, r21
 4b0:	6a 95       	dec	r22
 4b2:	e2 f7       	brpl	.-8      	; 0x4ac <dio_vidWriteChannel+0xd2>
 4b4:	ba 01       	movw	r22, r20
 4b6:	60 95       	com	r22
 4b8:	62 23       	and	r22, r18
 4ba:	62 bb       	out	0x12, r22	; 18
 4bc:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 4be:	22 b3       	in	r18, 0x12	; 18
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	ac 01       	movw	r20, r24
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <dio_vidWriteChannel+0xf2>
 4c8:	44 0f       	add	r20, r20
 4ca:	55 1f       	adc	r21, r21
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <dio_vidWriteChannel+0xee>
 4d0:	ba 01       	movw	r22, r20
 4d2:	62 2b       	or	r22, r18
 4d4:	62 bb       	out	0x12, r22	; 18
 4d6:	08 95       	ret

000004d8 <dio_vidWriteChannelGroup>:
*******************************************************************************/
void dio_vidWriteChannelGroup(dio_portId_t port,u8 value,u8 mask)
{
	/*	show me your code */
	
}
 4d8:	08 95       	ret

000004da <dio_vidFlipChannel>:
					 channel  -> MC channel ID
* \Return value:   : None                            
*******************************************************************************/
void dio_vidFlipChannel(dio_portId_t port, dio_channelId_t channel)
{
	switch (port)
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	a1 f0       	breq	.+40     	; 0x506 <dio_vidFlipChannel+0x2c>
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	28 f0       	brcs	.+10     	; 0x4ec <dio_vidFlipChannel+0x12>
 4e2:	82 30       	cpi	r24, 0x02	; 2
 4e4:	e9 f0       	breq	.+58     	; 0x520 <dio_vidFlipChannel+0x46>
 4e6:	83 30       	cpi	r24, 0x03	; 3
 4e8:	a1 f5       	brne	.+104    	; 0x552 <dio_vidFlipChannel+0x78>
 4ea:	27 c0       	rjmp	.+78     	; 0x53a <dio_vidFlipChannel+0x60>
	{
	case DIO_PORTA:
		FLIP_BIT(DIO_PORTA_REG,channel);
 4ec:	2b b3       	in	r18, 0x1b	; 27
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	ac 01       	movw	r20, r24
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <dio_vidFlipChannel+0x20>
 4f6:	44 0f       	add	r20, r20
 4f8:	55 1f       	adc	r21, r21
 4fa:	6a 95       	dec	r22
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <dio_vidFlipChannel+0x1c>
 4fe:	ba 01       	movw	r22, r20
 500:	62 27       	eor	r22, r18
 502:	6b bb       	out	0x1b, r22	; 27
		break;
 504:	08 95       	ret

	case DIO_PORTB:
		FLIP_BIT(DIO_PORTB_REG,channel);
 506:	28 b3       	in	r18, 0x18	; 24
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	ac 01       	movw	r20, r24
 50e:	02 c0       	rjmp	.+4      	; 0x514 <dio_vidFlipChannel+0x3a>
 510:	44 0f       	add	r20, r20
 512:	55 1f       	adc	r21, r21
 514:	6a 95       	dec	r22
 516:	e2 f7       	brpl	.-8      	; 0x510 <dio_vidFlipChannel+0x36>
 518:	ba 01       	movw	r22, r20
 51a:	62 27       	eor	r22, r18
 51c:	68 bb       	out	0x18, r22	; 24
		break;
 51e:	08 95       	ret

	case DIO_PORTC:
		FLIP_BIT(DIO_PORTC_REG,channel);
 520:	25 b3       	in	r18, 0x15	; 21
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	ac 01       	movw	r20, r24
 528:	02 c0       	rjmp	.+4      	; 0x52e <dio_vidFlipChannel+0x54>
 52a:	44 0f       	add	r20, r20
 52c:	55 1f       	adc	r21, r21
 52e:	6a 95       	dec	r22
 530:	e2 f7       	brpl	.-8      	; 0x52a <dio_vidFlipChannel+0x50>
 532:	ba 01       	movw	r22, r20
 534:	62 27       	eor	r22, r18
 536:	65 bb       	out	0x15, r22	; 21
		break;
 538:	08 95       	ret

	case DIO_PORTD:
		FLIP_BIT(DIO_PORTD_REG,channel);
 53a:	22 b3       	in	r18, 0x12	; 18
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	ac 01       	movw	r20, r24
 542:	02 c0       	rjmp	.+4      	; 0x548 <dio_vidFlipChannel+0x6e>
 544:	44 0f       	add	r20, r20
 546:	55 1f       	adc	r21, r21
 548:	6a 95       	dec	r22
 54a:	e2 f7       	brpl	.-8      	; 0x544 <dio_vidFlipChannel+0x6a>
 54c:	ba 01       	movw	r22, r20
 54e:	62 27       	eor	r22, r18
 550:	62 bb       	out	0x12, r22	; 18
 552:	08 95       	ret

00000554 <dio_dioLevelReadChannel>:
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
	switch (port)
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	89 f0       	breq	.+34     	; 0x57a <dio_dioLevelReadChannel+0x26>
 558:	81 30       	cpi	r24, 0x01	; 1
 55a:	28 f0       	brcs	.+10     	; 0x566 <dio_dioLevelReadChannel+0x12>
 55c:	82 30       	cpi	r24, 0x02	; 2
 55e:	b9 f0       	breq	.+46     	; 0x58e <dio_dioLevelReadChannel+0x3a>
 560:	83 30       	cpi	r24, 0x03	; 3
 562:	49 f5       	brne	.+82     	; 0x5b6 <dio_dioLevelReadChannel+0x62>
 564:	1e c0       	rjmp	.+60     	; 0x5a2 <dio_dioLevelReadChannel+0x4e>
	{
	 case DIO_PORTA:
		loc_pinRead = CHECK_BIT(DIO_PINA_REG, channel);
 566:	29 b3       	in	r18, 0x19	; 25
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	c9 01       	movw	r24, r18
 56c:	02 c0       	rjmp	.+4      	; 0x572 <dio_dioLevelReadChannel+0x1e>
 56e:	95 95       	asr	r25
 570:	87 95       	ror	r24
 572:	6a 95       	dec	r22
 574:	e2 f7       	brpl	.-8      	; 0x56e <dio_dioLevelReadChannel+0x1a>
 576:	81 70       	andi	r24, 0x01	; 1
		break;
 578:	08 95       	ret

	 case DIO_PORTB:
		loc_pinRead = CHECK_BIT(DIO_PINB_REG, channel);
 57a:	26 b3       	in	r18, 0x16	; 22
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	c9 01       	movw	r24, r18
 580:	02 c0       	rjmp	.+4      	; 0x586 <dio_dioLevelReadChannel+0x32>
 582:	95 95       	asr	r25
 584:	87 95       	ror	r24
 586:	6a 95       	dec	r22
 588:	e2 f7       	brpl	.-8      	; 0x582 <dio_dioLevelReadChannel+0x2e>
 58a:	81 70       	andi	r24, 0x01	; 1
		break;
 58c:	08 95       	ret

	 case DIO_PORTC:
		loc_pinRead = CHECK_BIT(DIO_PINC_REG, channel);
 58e:	23 b3       	in	r18, 0x13	; 19
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	c9 01       	movw	r24, r18
 594:	02 c0       	rjmp	.+4      	; 0x59a <dio_dioLevelReadChannel+0x46>
 596:	95 95       	asr	r25
 598:	87 95       	ror	r24
 59a:	6a 95       	dec	r22
 59c:	e2 f7       	brpl	.-8      	; 0x596 <dio_dioLevelReadChannel+0x42>
 59e:	81 70       	andi	r24, 0x01	; 1
		break;
 5a0:	08 95       	ret

	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
 5a2:	20 b3       	in	r18, 0x10	; 16
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	c9 01       	movw	r24, r18
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <dio_dioLevelReadChannel+0x5a>
 5aa:	95 95       	asr	r25
 5ac:	87 95       	ror	r24
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <dio_dioLevelReadChannel+0x56>
 5b2:	81 70       	andi	r24, 0x01	; 1
		break;
 5b4:	08 95       	ret
					 channel  -> MC channel ID
* \Return value:   : loc_pinRead   -> IO channel level                           
*******************************************************************************/
dio_level_t dio_dioLevelReadChannel(dio_portId_t port, dio_channelId_t channel)
{
	dio_level_t loc_pinRead = STD_LOW;
 5b6:	80 e0       	ldi	r24, 0x00	; 0
	 case DIO_PORTD:
		loc_pinRead = CHECK_BIT(DIO_PIND_REG, channel);
		break;
    }
	return loc_pinRead;
}
 5b8:	08 95       	ret

000005ba <dio_vidEnablePullUp>:
*******************************************************************************/
void dio_vidEnablePullUp(dio_portId_t port, dio_channelId_t channel)
{
	/*	show me your code */	
	
}
 5ba:	08 95       	ret

000005bc <EXT1_voidInit>:
	#elif EXTI1_SENSE_MODE == RISING
	SET_BIT(MCUCR , 1);
	SET_BIT(MCUCR , 2);
	
	#elif EXTI1_SENSE_MODE == FALLING
	CLEAR_BIT(MCUCR , 1);
 5bc:	85 b7       	in	r24, 0x35	; 53
 5be:	8d 7f       	andi	r24, 0xFD	; 253
 5c0:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR , 2);
 5c2:	85 b7       	in	r24, 0x35	; 53
 5c4:	84 60       	ori	r24, 0x04	; 4
 5c6:	85 bf       	out	0x35, r24	; 53
	/* End ( if ) condition for Macros */

	
	/** disable EXT0 in initialization function  **/
	/** like : void EXT0_voidDisable(); 		  */
	CLEAR_BIT( GICR , 7 );
 5c8:	8b b7       	in	r24, 0x3b	; 59
 5ca:	8f 77       	andi	r24, 0x7F	; 127
 5cc:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GIFR , 7 ) ;
 5ce:	8a b7       	in	r24, 0x3a	; 58
 5d0:	80 68       	ori	r24, 0x80	; 128
 5d2:	8a bf       	out	0x3a, r24	; 58
	
	SET_BIT(SREG,7);
 5d4:	8f b7       	in	r24, 0x3f	; 63
 5d6:	80 68       	ori	r24, 0x80	; 128
 5d8:	8f bf       	out	0x3f, r24	; 63
	
	
}
 5da:	08 95       	ret

000005dc <EXT2_voidInit>:
	
	/*  ( if / else if ) condition for Macros */
	
	
	#if EXTI2_SENSE_MODE ==  FALLING
	CLEAR_BIT(MCUCSR , 6);
 5dc:	84 b7       	in	r24, 0x34	; 52
 5de:	8f 7b       	andi	r24, 0xBF	; 191
 5e0:	84 bf       	out	0x34, r24	; 52
	SET_BIT(MCUCSR , 6);
	#endif
	/* End ( if ) condition for Macros */
	/** disable EXT0 in initialization function  **/
	/** like : void EXT0_voidDisable(); 		  */
	CLEAR_BIT( GICR , 5 );
 5e2:	8b b7       	in	r24, 0x3b	; 59
 5e4:	8f 7d       	andi	r24, 0xDF	; 223
 5e6:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GIFR , 5 ) ;
 5e8:	8a b7       	in	r24, 0x3a	; 58
 5ea:	80 62       	ori	r24, 0x20	; 32
 5ec:	8a bf       	out	0x3a, r24	; 58
	
	SET_BIT(SREG,7);
 5ee:	8f b7       	in	r24, 0x3f	; 63
 5f0:	80 68       	ori	r24, 0x80	; 128
 5f2:	8f bf       	out	0x3f, r24	; 63
	
	
}
 5f4:	08 95       	ret

000005f6 <EXT0_voidEnable>:
/****************************************************************/

void EXT0_voidEnable()
{
	
	SET_BIT( GICR , 6 );
 5f6:	8b b7       	in	r24, 0x3b	; 59
 5f8:	80 64       	ori	r24, 0x40	; 64
 5fa:	8b bf       	out	0x3b, r24	; 59
	
}
 5fc:	08 95       	ret

000005fe <EXT0_voidInit>:
	#elif EXTI0_SENSE_MODE == RISING
	SET_BIT(MCUCR , 0);
	SET_BIT(MCUCR , 1);
	
	#elif EXTI0_SENSE_MODE == FALLING
	CLEAR_BIT(MCUCR , 0);
 5fe:	85 b7       	in	r24, 0x35	; 53
 600:	8e 7f       	andi	r24, 0xFE	; 254
 602:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR , 1);
 604:	85 b7       	in	r24, 0x35	; 53
 606:	82 60       	ori	r24, 0x02	; 2
 608:	85 bf       	out	0x35, r24	; 53
	/* End ( if ) condition for Macros */

	
/** disable EXT0 in initialization function  **/
/** like : void EXT0_voidDisable(); 		  */
	CLEAR_BIT( GICR , 6 );
 60a:	8b b7       	in	r24, 0x3b	; 59
 60c:	8f 7b       	andi	r24, 0xBF	; 191
 60e:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GIFR , 6 ) ;
 610:	8a b7       	in	r24, 0x3a	; 58
 612:	80 64       	ori	r24, 0x40	; 64
 614:	8a bf       	out	0x3a, r24	; 58
	EXT0_voidEnable();
 616:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <EXT0_voidEnable>
	SET_BIT(SREG,7);
 61a:	8f b7       	in	r24, 0x3f	; 63
 61c:	80 68       	ori	r24, 0x80	; 128
 61e:	8f bf       	out	0x3f, r24	; 63
	
	
}
 620:	08 95       	ret

00000622 <EXT1_voidEnable>:
}

void EXT1_voidEnable()
{
	
	SET_BIT( GICR , 7 );
 622:	8b b7       	in	r24, 0x3b	; 59
 624:	80 68       	ori	r24, 0x80	; 128
 626:	8b bf       	out	0x3b, r24	; 59
	
}
 628:	08 95       	ret

0000062a <EXT2_voidEnable>:

void EXT2_voidEnable()
{
	
	SET_BIT( GICR , 5);
 62a:	8b b7       	in	r24, 0x3b	; 59
 62c:	80 62       	ori	r24, 0x20	; 32
 62e:	8b bf       	out	0x3b, r24	; 59
	
}
 630:	08 95       	ret

00000632 <EXT0_voidDisable>:
/****************************************************************/

void EXT0_voidDisable()
{
	
	CLEAR_BIT( GICR , 6 );
 632:	8b b7       	in	r24, 0x3b	; 59
 634:	8f 7b       	andi	r24, 0xBF	; 191
 636:	8b bf       	out	0x3b, r24	; 59
	
}
 638:	08 95       	ret

0000063a <EXT1_voidDisable>:

void EXT1_voidDisable()
{
	
	CLEAR_BIT( GICR , 7);
 63a:	8b b7       	in	r24, 0x3b	; 59
 63c:	8f 77       	andi	r24, 0x7F	; 127
 63e:	8b bf       	out	0x3b, r24	; 59
	
}
 640:	08 95       	ret

00000642 <EXT2_voidDisable>:
void EXT2_voidDisable()
{
	
	CLEAR_BIT( GICR , 5);
 642:	8b b7       	in	r24, 0x3b	; 59
 644:	8f 7d       	andi	r24, 0xDF	; 223
 646:	8b bf       	out	0x3b, r24	; 59
	
}
 648:	08 95       	ret

0000064a <EXT0_voidCallBack>:
/*     				 initialized 							    */
/****************************************************************/

void EXT0_voidCallBack(pf addresscpy_in0)
{
	if(addresscpy_in0 != NULL)
 64a:	00 97       	sbiw	r24, 0x00	; 0
 64c:	21 f0       	breq	.+8      	; 0x656 <EXT0_voidCallBack+0xc>
	{
		x = addresscpy_in0;
 64e:	90 93 71 00 	sts	0x0071, r25
 652:	80 93 70 00 	sts	0x0070, r24
 656:	08 95       	ret

00000658 <EXT1_voidCallBack>:
}


void EXT1_voidCallBack(pf addresscpy_int1)
{
	if(addresscpy_int1 != NULL)
 658:	00 97       	sbiw	r24, 0x00	; 0
 65a:	21 f0       	breq	.+8      	; 0x664 <EXT1_voidCallBack+0xc>
	{
		y = addresscpy_int1;
 65c:	90 93 6f 00 	sts	0x006F, r25
 660:	80 93 6e 00 	sts	0x006E, r24
 664:	08 95       	ret

00000666 <EXT2_voidCallBack>:
	}
}

void EXT2_voidCallBack(pf addresscpy_int2)
{
	if(addresscpy_int2 != NULL)
 666:	00 97       	sbiw	r24, 0x00	; 0
 668:	21 f0       	breq	.+8      	; 0x672 <EXT2_voidCallBack+0xc>
	{
		z = addresscpy_int2;
 66a:	90 93 6d 00 	sts	0x006D, r25
 66e:	80 93 6c 00 	sts	0x006C, r24
 672:	08 95       	ret

00000674 <EXT0_voidSetSignalch>:
/*     				 initialized 							    */
/****************************************************************/
void EXT0_voidSetSignalch(u8 SenseCpy)
{
	
if (SenseCpy == IOC)
 674:	81 30       	cpi	r24, 0x01	; 1
 676:	39 f4       	brne	.+14     	; 0x686 <EXT0_voidSetSignalch+0x12>
{
	SET_BIT(MCUCR , 0);
 678:	85 b7       	in	r24, 0x35	; 53
 67a:	81 60       	ori	r24, 0x01	; 1
 67c:	85 bf       	out	0x35, r24	; 53
CLEAR_BIT(MCUCR , 1);
 67e:	85 b7       	in	r24, 0x35	; 53
 680:	8d 7f       	andi	r24, 0xFD	; 253
 682:	85 bf       	out	0x35, r24	; 53
 684:	08 95       	ret
}
else if (SenseCpy == RISING)
 686:	87 30       	cpi	r24, 0x07	; 7
 688:	39 f4       	brne	.+14     	; 0x698 <EXT0_voidSetSignalch+0x24>
{
SET_BIT(MCUCR , 0);
 68a:	85 b7       	in	r24, 0x35	; 53
 68c:	81 60       	ori	r24, 0x01	; 1
 68e:	85 bf       	out	0x35, r24	; 53
SET_BIT(MCUCR , 1);
 690:	85 b7       	in	r24, 0x35	; 53
 692:	82 60       	ori	r24, 0x02	; 2
 694:	85 bf       	out	0x35, r24	; 53
 696:	08 95       	ret
}
else if (SenseCpy == FALLING)
 698:	84 30       	cpi	r24, 0x04	; 4
 69a:	39 f4       	brne	.+14     	; 0x6aa <EXT0_voidSetSignalch+0x36>
{
	CLEAR_BIT(MCUCR , 0);
 69c:	85 b7       	in	r24, 0x35	; 53
 69e:	8e 7f       	andi	r24, 0xFE	; 254
 6a0:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR , 1);
 6a2:	85 b7       	in	r24, 0x35	; 53
 6a4:	82 60       	ori	r24, 0x02	; 2
 6a6:	85 bf       	out	0x35, r24	; 53
 6a8:	08 95       	ret
}

else if (SenseCpy == LOW_LEVEL)
 6aa:	8a 30       	cpi	r24, 0x0A	; 10
 6ac:	31 f4       	brne	.+12     	; 0x6ba <EXT0_voidSetSignalch+0x46>
{
	
CLEAR_BIT(MCUCR , 0);
 6ae:	85 b7       	in	r24, 0x35	; 53
 6b0:	8e 7f       	andi	r24, 0xFE	; 254
 6b2:	85 bf       	out	0x35, r24	; 53
CLEAR_BIT(MCUCR , 1);
 6b4:	85 b7       	in	r24, 0x35	; 53
 6b6:	8d 7f       	andi	r24, 0xFD	; 253
 6b8:	85 bf       	out	0x35, r24	; 53
 6ba:	08 95       	ret

000006bc <__vector_1>:
/** Linker Problem solved */



void __vector_1(void)
{
 6bc:	1f 92       	push	r1
 6be:	0f 92       	push	r0
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	0f 92       	push	r0
 6c4:	11 24       	eor	r1, r1
 6c6:	2f 93       	push	r18
 6c8:	3f 93       	push	r19
 6ca:	4f 93       	push	r20
 6cc:	5f 93       	push	r21
 6ce:	6f 93       	push	r22
 6d0:	7f 93       	push	r23
 6d2:	8f 93       	push	r24
 6d4:	9f 93       	push	r25
 6d6:	af 93       	push	r26
 6d8:	bf 93       	push	r27
 6da:	ef 93       	push	r30
 6dc:	ff 93       	push	r31
	x();
 6de:	e0 91 70 00 	lds	r30, 0x0070
 6e2:	f0 91 71 00 	lds	r31, 0x0071
 6e6:	09 95       	icall
	
}
 6e8:	ff 91       	pop	r31
 6ea:	ef 91       	pop	r30
 6ec:	bf 91       	pop	r27
 6ee:	af 91       	pop	r26
 6f0:	9f 91       	pop	r25
 6f2:	8f 91       	pop	r24
 6f4:	7f 91       	pop	r23
 6f6:	6f 91       	pop	r22
 6f8:	5f 91       	pop	r21
 6fa:	4f 91       	pop	r20
 6fc:	3f 91       	pop	r19
 6fe:	2f 91       	pop	r18
 700:	0f 90       	pop	r0
 702:	0f be       	out	0x3f, r0	; 63
 704:	0f 90       	pop	r0
 706:	1f 90       	pop	r1
 708:	18 95       	reti

0000070a <__vector_2>:

void __vector_2(void)
{
 70a:	1f 92       	push	r1
 70c:	0f 92       	push	r0
 70e:	0f b6       	in	r0, 0x3f	; 63
 710:	0f 92       	push	r0
 712:	11 24       	eor	r1, r1
 714:	2f 93       	push	r18
 716:	3f 93       	push	r19
 718:	4f 93       	push	r20
 71a:	5f 93       	push	r21
 71c:	6f 93       	push	r22
 71e:	7f 93       	push	r23
 720:	8f 93       	push	r24
 722:	9f 93       	push	r25
 724:	af 93       	push	r26
 726:	bf 93       	push	r27
 728:	ef 93       	push	r30
 72a:	ff 93       	push	r31
	y();
 72c:	e0 91 6e 00 	lds	r30, 0x006E
 730:	f0 91 6f 00 	lds	r31, 0x006F
 734:	09 95       	icall
	
}
 736:	ff 91       	pop	r31
 738:	ef 91       	pop	r30
 73a:	bf 91       	pop	r27
 73c:	af 91       	pop	r26
 73e:	9f 91       	pop	r25
 740:	8f 91       	pop	r24
 742:	7f 91       	pop	r23
 744:	6f 91       	pop	r22
 746:	5f 91       	pop	r21
 748:	4f 91       	pop	r20
 74a:	3f 91       	pop	r19
 74c:	2f 91       	pop	r18
 74e:	0f 90       	pop	r0
 750:	0f be       	out	0x3f, r0	; 63
 752:	0f 90       	pop	r0
 754:	1f 90       	pop	r1
 756:	18 95       	reti

00000758 <__vector_3>:
void __vector_3(void)
{
 758:	1f 92       	push	r1
 75a:	0f 92       	push	r0
 75c:	0f b6       	in	r0, 0x3f	; 63
 75e:	0f 92       	push	r0
 760:	11 24       	eor	r1, r1
 762:	2f 93       	push	r18
 764:	3f 93       	push	r19
 766:	4f 93       	push	r20
 768:	5f 93       	push	r21
 76a:	6f 93       	push	r22
 76c:	7f 93       	push	r23
 76e:	8f 93       	push	r24
 770:	9f 93       	push	r25
 772:	af 93       	push	r26
 774:	bf 93       	push	r27
 776:	ef 93       	push	r30
 778:	ff 93       	push	r31
	z();
 77a:	e0 91 6c 00 	lds	r30, 0x006C
 77e:	f0 91 6d 00 	lds	r31, 0x006D
 782:	09 95       	icall
	
}
 784:	ff 91       	pop	r31
 786:	ef 91       	pop	r30
 788:	bf 91       	pop	r27
 78a:	af 91       	pop	r26
 78c:	9f 91       	pop	r25
 78e:	8f 91       	pop	r24
 790:	7f 91       	pop	r23
 792:	6f 91       	pop	r22
 794:	5f 91       	pop	r21
 796:	4f 91       	pop	r20
 798:	3f 91       	pop	r19
 79a:	2f 91       	pop	r18
 79c:	0f 90       	pop	r0
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	0f 90       	pop	r0
 7a2:	1f 90       	pop	r1
 7a4:	18 95       	reti

000007a6 <led_init>:
* \Parameters (in) : parameterName   Parameter Describtion                                                                         
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
void led_init(void) 
{   dio_vidConfigChannel(DIO_PORTB,7,OUTPUT);
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	67 e0       	ldi	r22, 0x07	; 7
 7aa:	41 e0       	ldi	r20, 0x01	; 1
 7ac:	0e 94 6e 01 	call	0x2dc	; 0x2dc <dio_vidConfigChannel>
	dio_vidConfigChannel(DIO_PORTA,4,OUTPUT);
 7b0:	80 e0       	ldi	r24, 0x00	; 0
 7b2:	64 e0       	ldi	r22, 0x04	; 4
 7b4:	41 e0       	ldi	r20, 0x01	; 1
 7b6:	0e 94 6e 01 	call	0x2dc	; 0x2dc <dio_vidConfigChannel>
	dio_vidConfigChannel(DIO_PORTA,5,OUTPUT);
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	65 e0       	ldi	r22, 0x05	; 5
 7be:	41 e0       	ldi	r20, 0x01	; 1
 7c0:	0e 94 6e 01 	call	0x2dc	; 0x2dc <dio_vidConfigChannel>
	dio_vidConfigChannel(DIO_PORTA,6,OUTPUT);
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	66 e0       	ldi	r22, 0x06	; 6
 7c8:	41 e0       	ldi	r20, 0x01	; 1
 7ca:	0e 94 6e 01 	call	0x2dc	; 0x2dc <dio_vidConfigChannel>
	
}
 7ce:	08 95       	ret

000007d0 <led_on>:
*                                    E_NOT_OK
*******************************************************************************/

void led_on(led_ID id)
{
	switch(id)
 7d0:	82 30       	cpi	r24, 0x02	; 2
 7d2:	81 f0       	breq	.+32     	; 0x7f4 <led_on+0x24>
 7d4:	83 30       	cpi	r24, 0x03	; 3
 7d6:	18 f4       	brcc	.+6      	; 0x7de <led_on+0xe>
 7d8:	81 30       	cpi	r24, 0x01	; 1
 7da:	e9 f4       	brne	.+58     	; 0x816 <led_on+0x46>
 7dc:	05 c0       	rjmp	.+10     	; 0x7e8 <led_on+0x18>
 7de:	83 30       	cpi	r24, 0x03	; 3
 7e0:	79 f0       	breq	.+30     	; 0x800 <led_on+0x30>
 7e2:	84 30       	cpi	r24, 0x04	; 4
 7e4:	c1 f4       	brne	.+48     	; 0x816 <led_on+0x46>
 7e6:	12 c0       	rjmp	.+36     	; 0x80c <led_on+0x3c>
	{
		case led1:
		// if(led_source)
		 dio_vidWriteChannel(DIO_PORTB,7,led1_state);
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	67 e0       	ldi	r22, 0x07	; 7
 7ec:	41 e0       	ldi	r20, 0x01	; 1
 7ee:	0e 94 ed 01 	call	0x3da	; 0x3da <dio_vidWriteChannel>
		// else 
		// dio_vidWriteChannel(DIO_PORTB,7,STD_LOW);
		break ;
 7f2:	08 95       	ret
		case led2:
		//if(led_source)
		dio_vidWriteChannel(DIO_PORTA,4,led2_state);
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	64 e0       	ldi	r22, 0x04	; 4
 7f8:	41 e0       	ldi	r20, 0x01	; 1
 7fa:	0e 94 ed 01 	call	0x3da	; 0x3da <dio_vidWriteChannel>
		//else
		//dio_vidWriteChannel(DIO_PORTA,4,STD_LOW);
		break ;
 7fe:	08 95       	ret
		case led3:
		//if(led_source)
		dio_vidWriteChannel(DIO_PORTA,5,led3_state);
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	65 e0       	ldi	r22, 0x05	; 5
 804:	41 e0       	ldi	r20, 0x01	; 1
 806:	0e 94 ed 01 	call	0x3da	; 0x3da <dio_vidWriteChannel>
		//else
		//dio_vidWriteChannel(DIO_PORTA,5,STD_LOW);
		break ;
 80a:	08 95       	ret
		case led4:
		//if(led_source)
		dio_vidWriteChannel(DIO_PORTA,6,led4_state);
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	66 e0       	ldi	r22, 0x06	; 6
 810:	41 e0       	ldi	r20, 0x01	; 1
 812:	0e 94 ed 01 	call	0x3da	; 0x3da <dio_vidWriteChannel>
 816:	08 95       	ret

00000818 <led_off>:



void led_off(led_ID id)
{
	switch(id)
 818:	82 30       	cpi	r24, 0x02	; 2
 81a:	81 f0       	breq	.+32     	; 0x83c <led_off+0x24>
 81c:	83 30       	cpi	r24, 0x03	; 3
 81e:	18 f4       	brcc	.+6      	; 0x826 <led_off+0xe>
 820:	81 30       	cpi	r24, 0x01	; 1
 822:	e9 f4       	brne	.+58     	; 0x85e <led_off+0x46>
 824:	05 c0       	rjmp	.+10     	; 0x830 <led_off+0x18>
 826:	83 30       	cpi	r24, 0x03	; 3
 828:	79 f0       	breq	.+30     	; 0x848 <led_off+0x30>
 82a:	84 30       	cpi	r24, 0x04	; 4
 82c:	c1 f4       	brne	.+48     	; 0x85e <led_off+0x46>
 82e:	12 c0       	rjmp	.+36     	; 0x854 <led_off+0x3c>
	{
		case led1:
		if(led_source)
		dio_vidWriteChannel(DIO_PORTB,7,STD_LOW);
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	67 e0       	ldi	r22, 0x07	; 7
 834:	40 e0       	ldi	r20, 0x00	; 0
 836:	0e 94 ed 01 	call	0x3da	; 0x3da <dio_vidWriteChannel>
		else
		dio_vidWriteChannel(DIO_PORTB,7,STD_HIGH);
		break ;
 83a:	08 95       	ret
		case led2:
		if(led_source)
		dio_vidWriteChannel(DIO_PORTA,4,STD_LOW);
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	64 e0       	ldi	r22, 0x04	; 4
 840:	40 e0       	ldi	r20, 0x00	; 0
 842:	0e 94 ed 01 	call	0x3da	; 0x3da <dio_vidWriteChannel>
		else
		dio_vidWriteChannel(DIO_PORTA,4,STD_HIGH);
		break ;
 846:	08 95       	ret
		case led3:
		if(led_source)
		dio_vidWriteChannel(DIO_PORTA,5,STD_LOW);
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	65 e0       	ldi	r22, 0x05	; 5
 84c:	40 e0       	ldi	r20, 0x00	; 0
 84e:	0e 94 ed 01 	call	0x3da	; 0x3da <dio_vidWriteChannel>
		else
		dio_vidWriteChannel(DIO_PORTA,5,STD_HIGH);
		break ;
 852:	08 95       	ret
		case led4:
		if(led_source)
		dio_vidWriteChannel(DIO_PORTA,6,STD_LOW);
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	66 e0       	ldi	r22, 0x06	; 6
 858:	40 e0       	ldi	r20, 0x00	; 0
 85a:	0e 94 ed 01 	call	0x3da	; 0x3da <dio_vidWriteChannel>
 85e:	08 95       	ret

00000860 <led_toggle>:
}


void led_toggle(led_ID id)
{
	switch(id)
 860:	82 30       	cpi	r24, 0x02	; 2
 862:	79 f0       	breq	.+30     	; 0x882 <led_toggle+0x22>
 864:	83 30       	cpi	r24, 0x03	; 3
 866:	18 f4       	brcc	.+6      	; 0x86e <led_toggle+0xe>
 868:	81 30       	cpi	r24, 0x01	; 1
 86a:	c9 f4       	brne	.+50     	; 0x89e <led_toggle+0x3e>
 86c:	05 c0       	rjmp	.+10     	; 0x878 <led_toggle+0x18>
 86e:	83 30       	cpi	r24, 0x03	; 3
 870:	69 f0       	breq	.+26     	; 0x88c <led_toggle+0x2c>
 872:	84 30       	cpi	r24, 0x04	; 4
 874:	a1 f4       	brne	.+40     	; 0x89e <led_toggle+0x3e>
 876:	0f c0       	rjmp	.+30     	; 0x896 <led_toggle+0x36>
	{
		case led1:
		dio_vidFlipChannel(DIO_PORTB,7);
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	67 e0       	ldi	r22, 0x07	; 7
 87c:	0e 94 6d 02 	call	0x4da	; 0x4da <dio_vidFlipChannel>
		break ;
 880:	08 95       	ret
		case led2:
		dio_vidFlipChannel(DIO_PORTA,4);
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	64 e0       	ldi	r22, 0x04	; 4
 886:	0e 94 6d 02 	call	0x4da	; 0x4da <dio_vidFlipChannel>
		break ;
 88a:	08 95       	ret
		case led3:
		dio_vidFlipChannel(DIO_PORTA,5);
 88c:	80 e0       	ldi	r24, 0x00	; 0
 88e:	65 e0       	ldi	r22, 0x05	; 5
 890:	0e 94 6d 02 	call	0x4da	; 0x4da <dio_vidFlipChannel>
		break ;
 894:	08 95       	ret
		case led4:
		dio_vidFlipChannel(DIO_PORTA,6);
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	66 e0       	ldi	r22, 0x06	; 6
 89a:	0e 94 6d 02 	call	0x4da	; 0x4da <dio_vidFlipChannel>
 89e:	08 95       	ret

000008a0 <__mulsi3>:
 8a0:	62 9f       	mul	r22, r18
 8a2:	d0 01       	movw	r26, r0
 8a4:	73 9f       	mul	r23, r19
 8a6:	f0 01       	movw	r30, r0
 8a8:	82 9f       	mul	r24, r18
 8aa:	e0 0d       	add	r30, r0
 8ac:	f1 1d       	adc	r31, r1
 8ae:	64 9f       	mul	r22, r20
 8b0:	e0 0d       	add	r30, r0
 8b2:	f1 1d       	adc	r31, r1
 8b4:	92 9f       	mul	r25, r18
 8b6:	f0 0d       	add	r31, r0
 8b8:	83 9f       	mul	r24, r19
 8ba:	f0 0d       	add	r31, r0
 8bc:	74 9f       	mul	r23, r20
 8be:	f0 0d       	add	r31, r0
 8c0:	65 9f       	mul	r22, r21
 8c2:	f0 0d       	add	r31, r0
 8c4:	99 27       	eor	r25, r25
 8c6:	72 9f       	mul	r23, r18
 8c8:	b0 0d       	add	r27, r0
 8ca:	e1 1d       	adc	r30, r1
 8cc:	f9 1f       	adc	r31, r25
 8ce:	63 9f       	mul	r22, r19
 8d0:	b0 0d       	add	r27, r0
 8d2:	e1 1d       	adc	r30, r1
 8d4:	f9 1f       	adc	r31, r25
 8d6:	bd 01       	movw	r22, r26
 8d8:	cf 01       	movw	r24, r30
 8da:	11 24       	eor	r1, r1
 8dc:	08 95       	ret

000008de <__udivmodsi4>:
 8de:	a1 e2       	ldi	r26, 0x21	; 33
 8e0:	1a 2e       	mov	r1, r26
 8e2:	aa 1b       	sub	r26, r26
 8e4:	bb 1b       	sub	r27, r27
 8e6:	fd 01       	movw	r30, r26
 8e8:	0d c0       	rjmp	.+26     	; 0x904 <__udivmodsi4_ep>

000008ea <__udivmodsi4_loop>:
 8ea:	aa 1f       	adc	r26, r26
 8ec:	bb 1f       	adc	r27, r27
 8ee:	ee 1f       	adc	r30, r30
 8f0:	ff 1f       	adc	r31, r31
 8f2:	a2 17       	cp	r26, r18
 8f4:	b3 07       	cpc	r27, r19
 8f6:	e4 07       	cpc	r30, r20
 8f8:	f5 07       	cpc	r31, r21
 8fa:	20 f0       	brcs	.+8      	; 0x904 <__udivmodsi4_ep>
 8fc:	a2 1b       	sub	r26, r18
 8fe:	b3 0b       	sbc	r27, r19
 900:	e4 0b       	sbc	r30, r20
 902:	f5 0b       	sbc	r31, r21

00000904 <__udivmodsi4_ep>:
 904:	66 1f       	adc	r22, r22
 906:	77 1f       	adc	r23, r23
 908:	88 1f       	adc	r24, r24
 90a:	99 1f       	adc	r25, r25
 90c:	1a 94       	dec	r1
 90e:	69 f7       	brne	.-38     	; 0x8ea <__udivmodsi4_loop>
 910:	60 95       	com	r22
 912:	70 95       	com	r23
 914:	80 95       	com	r24
 916:	90 95       	com	r25
 918:	9b 01       	movw	r18, r22
 91a:	ac 01       	movw	r20, r24
 91c:	bd 01       	movw	r22, r26
 91e:	cf 01       	movw	r24, r30
 920:	08 95       	ret

00000922 <_exit>:
 922:	f8 94       	cli

00000924 <__stop_program>:
 924:	ff cf       	rjmp	.-2      	; 0x924 <__stop_program>
